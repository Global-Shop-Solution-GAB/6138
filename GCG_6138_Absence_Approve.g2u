Program.Sub.ScreenSU.Start
Gui.Form..Create(BaseForm)
Gui.Form..Caption("Absence Approval")
Gui.Form..Size(20790,11040)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..AlwaysOnTop(False)
Gui.Form..FontName("Tahoma")
Gui.Form..FontSize(8.25)
Gui.Form..ControlBox(True)
Gui.Form..MaxButton(True)
Gui.Form..MinButton(True)
Gui.Form..Moveable(True)
Gui.Form..Sizeable(True)
Gui.Form..ShowInTaskBar(True)
Gui.Form..TitleBar(True)
Gui.Form.gsRequests.Create(GsGridControl)
Gui.Form.gsRequests.Size(20340,8775)
Gui.Form.gsRequests.Position(120,1200)
Gui.Form.gsRequests.Event(RowCellClick,gsRequests_RowCellClick)
Gui.Form.gsRequests.Enabled(True)
Gui.Form.gsRequests.Visible(True)
Gui.Form.gsRequests.Zorder(0)
Gui.Form.cmdLoad.Create(Button)
Gui.Form.cmdLoad.Size(855,375)
Gui.Form.cmdLoad.Position(17895,60)
Gui.Form.cmdLoad.Caption("Refresh")
Gui.Form.cmdLoad.Event(Click,cmdLoad_Click)
Gui.Form.cmdLoad.Enabled(True)
Gui.Form.cmdLoad.Visible(True)
Gui.Form.cmdLoad.Zorder(0)
Gui.Form.cmdLoad.FontName("Tahoma")
Gui.Form.cmdLoad.FontSize(8.25)
Gui.Form.lbl1.Create(Label,"User",True,450,255,0,2040,180,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl1.BorderStyle(0)
Gui.Form.txtUser.Create(TextBox,"",True,1500,300,0,2490,90,False,0,"Arial",8,-2147483643,2)
Gui.Form.lbl2.Create(Label,"Mode",True,510,255,0,150,180,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl2.BorderStyle(0)
Gui.Form.txtMode.Create(TextBox,"",True,1275,300,0,675,90,False,0,"Arial",8,-2147483643,2)
Gui.Form.ddlPeriod.Create(DropDownList)
Gui.Form.ddlPeriod.Size(2580,330)
Gui.Form.ddlPeriod.Position(15270,90)
Gui.Form.ddlPeriod.DefaultValue("All")
Gui.Form.ddlPeriod.Enabled(True)
Gui.Form.ddlPeriod.Visible(True)
Gui.Form.ddlPeriod.Zorder(0)
Gui.Form.ddlPeriod.FontName("Tahoma")
Gui.Form.ddlPeriod.FontSize(8.25)
Gui.Form.lbl4.Create(Label,"Employee ID",True,975,255,0,4230,180,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl4.BorderStyle(0)
Gui.Form.txtEmpID.Create(TextBox,"",True,915,300,0,5235,90,False,0,"Arial",8,-2147483643,2)
Gui.Form.lbl5.Create(Label,"Name",True,540,255,0,6285,180,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl5.BorderStyle(0)
Gui.Form.txtEmpName.Create(TextBox,"",True,2430,300,0,6855,90,False,0,"Arial",8,-2147483643,2)
Gui.Form.lbl6.Create(Label,"Email",True,510,255,0,9435,180,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl6.BorderStyle(0)
Gui.Form.txtEmail.Create(TextBox,"",True,4110,300,0,9975,90,False,0,"Arial",8,-2147483643,2)
Gui.Form.cmdExport.Create(Button)
Gui.Form.cmdExport.Size(855,375)
Gui.Form.cmdExport.Position(14280,60)
Gui.Form.cmdExport.Caption("Export")
Gui.Form.cmdExport.Event(Click,cmdExport_Click)
Gui.Form.cmdExport.Enabled(True)
Gui.Form.cmdExport.Visible(True)
Gui.Form.cmdExport.Zorder(0)
Gui.Form.cmdExport.FontName("Tahoma")
Gui.Form.cmdExport.FontSize(8.25)
Gui.Form.proBar1.Create(ProgressBar)
Gui.Form.proBar1.Visible(False)
Gui.Form.proBar1.Size(9765,135)
Gui.Form.proBar1.Position(8115,525)
Gui.Form.lblProgress.Create(Label,"Process Vacation Left...",False,1935,255,0,6135,495,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lblProgress.BorderStyle(0)
Gui.Form.lbl3.Create(Label,"Pending Approved Calculation starting from :",True,3345,255,0,120,945,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lbl3.BorderStyle(0)
Gui.Form.lblStartingDate4PendingAppr.Create(Label,"",True,1935,255,0,3435,945,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lblStartingDate4PendingAppr.BorderStyle(0)
Gui.Form.chkReceiveEmail.Create(CheckBox)
Gui.Form.chkReceiveEmail.Size(2730,300)
Gui.Form.chkReceiveEmail.Position(645,465)
Gui.Form.chkReceiveEmail.Caption("Do not send me Request Emails")
Gui.Form.chkReceiveEmail.Enabled(True)
Gui.Form.chkReceiveEmail.Visible(True)
Gui.Form.chkReceiveEmail.Zorder(0)
Gui.Form.chkReceiveEmail.FontName("Tahoma")
Gui.Form.chkReceiveEmail.FontSize(8.25)
Gui.Form.cmdSaveOptEmail.Create(Button)
Gui.Form.cmdSaveOptEmail.Size(690,330)
Gui.Form.cmdSaveOptEmail.Position(3420,465)
Gui.Form.cmdSaveOptEmail.Caption("Save")
Gui.Form.cmdSaveOptEmail.Event(Click,cmdSaveOptEmail_Click)
Gui.Form.cmdSaveOptEmail.Enabled(True)
Gui.Form.cmdSaveOptEmail.Visible(True)
Gui.Form.cmdSaveOptEmail.Zorder(0)
Gui.Form.cmdSaveOptEmail.FontName("Tahoma")
Gui.Form.cmdSaveOptEmail.FontSize(8.25)
Gui.Form.cmdTA.Create(Button)
Gui.Form.cmdTA.Size(690,330)
Gui.Form.cmdTA.Position(4305,465)
Gui.Form.cmdTA.Caption("T.A")
Gui.Form.cmdTA.Event(Click,cmdTA_Click)
Gui.Form.cmdTA.BackColor(-2147483624)
Gui.Form.cmdTA.Enabled(True)
Gui.Form.cmdTA.Visible(True)
Gui.Form.cmdTA.Zorder(0)
Gui.Form.cmdTA.FontName("Tahoma")
Gui.Form.cmdTA.FontSize(8.25)
Gui.Form.ddlYear.Create(DropDownList)
Gui.Form.ddlYear.Size(1515,330)
Gui.Form.ddlYear.Position(6945,780)
Gui.Form.ddlYear.Visible(False)
Gui.Form.ddlYear.Enabled(True)
Gui.Form.ddlYear.Zorder(0)
Gui.Form.ddlYear.FontName("Tahoma")
Gui.Form.ddlYear.FontSize(8.25)
Gui.Form.lblYear.Create(Label,"Year:",False,585,255,0,6315,855,True,0,"Arial",8,-2147483633,0,0)
Gui.Form.lblYear.BorderStyle(0)
Gui.Form.cmdProcess.Create(Button)
Gui.Form.cmdProcess.Enabled(True)
Gui.Form.cmdProcess.Visible(True)
Gui.Form.cmdProcess.Zorder(0)
Gui.Form.cmdProcess.Size(1125,345)
Gui.Form.cmdProcess.Position(195,10095)
Gui.Form.cmdProcess.Caption("Process")
Gui.Form.cmdProcess.FontName("Tahoma")
Gui.Form.cmdProcess.FontSize(8.25)
Gui.Form.cmdProcess.Event(Click,cmdProcess_Click1)
Gui.Form.cmdProcess.Anchor(6)
Gui.Request..Create(BaseForm)
Gui.Request..Caption("Request")
Gui.Request..Size(8910,10575)
Gui.Request..MinX(0)
Gui.Request..MinY(0)
Gui.Request..Position(0,0)
Gui.Request..BackColor(-2147483633)
Gui.Request..MousePointer(0)
Gui.Request..Event(UnLoad,Request_UnLoad)
Gui.Request..AlwaysOnTop(False)
Gui.Request..FontName("Tahoma")
Gui.Request..FontSize(8.25)
Gui.Request..ControlBox(True)
Gui.Request..MaxButton(True)
Gui.Request..MinButton(True)
Gui.Request..Moveable(True)
Gui.Request..Sizeable(True)
Gui.Request..ShowInTaskBar(True)
Gui.Request..TitleBar(True)
Gui.Request.lbl1.Create(Label,"Request ID:",True,1020,255,0,120,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl1.BorderStyle(0)
Gui.Request.optApprove.Create(Option)
Gui.Request.optApprove.Size(1380,255)
Gui.Request.optApprove.Position(120,915)
Gui.Request.optApprove.Caption("Approve")
Gui.Request.optApprove.Event(Click,optApprove_Click)
Gui.Request.optApprove.TabStop(True)
Gui.Request.optApprove.TabIndex(1)
Gui.Request.optApprove.ForeColor(-2147483635)
Gui.Request.optApprove.Enabled(False)
Gui.Request.optApprove.Visible(True)
Gui.Request.optApprove.Zorder(0)
Gui.Request.optApprove.FontName("Tahoma")
Gui.Request.optApprove.FontSize(8.25)
Gui.Request.optReject.Create(Option)
Gui.Request.optReject.Size(1410,255)
Gui.Request.optReject.Position(1605,915)
Gui.Request.optReject.Caption("Reject")
Gui.Request.optReject.Event(Click,optReject_Click)
Gui.Request.optReject.TabStop(True)
Gui.Request.optReject.TabIndex(2)
Gui.Request.optReject.ForeColor(255)
Gui.Request.optReject.Enabled(False)
Gui.Request.optReject.Visible(True)
Gui.Request.optReject.Zorder(0)
Gui.Request.optReject.FontName("Tahoma")
Gui.Request.optReject.FontSize(8.25)
Gui.Request.cmdProcess.Create(Button)
Gui.Request.cmdProcess.Size(1005,495)
Gui.Request.cmdProcess.Position(90,9540)
Gui.Request.cmdProcess.Caption("Process")
Gui.Request.cmdProcess.Event(Click,cmdProcess_Click)
Gui.Request.cmdProcess.TabStop(True)
Gui.Request.cmdProcess.TabIndex(11)
Gui.Request.cmdProcess.BackColor(-2147483635)
Gui.Request.cmdProcess.ForeColor(16777215)
Gui.Request.cmdProcess.Enabled(True)
Gui.Request.cmdProcess.Visible(True)
Gui.Request.cmdProcess.Zorder(0)
Gui.Request.cmdProcess.FontName("Tahoma")
Gui.Request.cmdProcess.FontSize(8.25)
Gui.Request.lblReqID.Create(Label,"ReqID",True,600,255,0,1140,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblReqID.BorderStyle(0)
Gui.Request.lblSeq.Create(Label,"Seq",True,630,255,0,1875,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblSeq.BorderStyle(0)
Gui.Request.chkEmail.Create(CheckBox)
Gui.Request.chkEmail.Size(1200,300)
Gui.Request.chkEmail.Position(3150,885)
Gui.Request.chkEmail.Caption("Email")
Gui.Request.chkEmail.Event(Click,chkEmail_Click)
Gui.Request.chkEmail.Value(1)
Gui.Request.chkEmail.TabStop(True)
Gui.Request.chkEmail.TabIndex(3)
Gui.Request.chkEmail.Enabled(True)
Gui.Request.chkEmail.Visible(True)
Gui.Request.chkEmail.Zorder(0)
Gui.Request.chkEmail.FontName("Tahoma")
Gui.Request.chkEmail.FontSize(8.25)
Gui.Request.lblReqID2.Create(Label,"-",True,150,255,0,1740,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblReqID2.BorderStyle(0)
Gui.Request.frEmail.Create(Frame)
Gui.Request.frEmail.Size(8550,7020)
Gui.Request.frEmail.Position(120,2445)
Gui.Request.frEmail.Caption("Email")
Gui.Request.frEmail.Enabled(True)
Gui.Request.frEmail.Visible(True)
Gui.Request.frEmail.Zorder(0)
Gui.Request.frEmail.FontName("Tahoma")
Gui.Request.frEmail.FontSize(8.25)
Gui.Request.txtEmail.Create(TextBox,"",True,3930,300,0,75,1005,True,0,"Arial",8,-2147483643,2)
Gui.Request.txtEmail.Parent("frEmail")
Gui.Request.txtEmail.TabStop(True)
Gui.Request.txtEmail.TabIndex(5)
Gui.Request.cmdAddRecepient.Create(Button)
Gui.Request.cmdAddRecepient.Size(1815,375)
Gui.Request.cmdAddRecepient.Position(4800,960)
Gui.Request.cmdAddRecepient.Parent("frEmail")
Gui.Request.cmdAddRecepient.Caption("Add Recepient")
Gui.Request.cmdAddRecepient.Event(Click,cmdAddRecepient_Click)
Gui.Request.cmdAddRecepient.TabStop(True)
Gui.Request.cmdAddRecepient.TabIndex(7)
Gui.Request.cmdAddRecepient.Enabled(True)
Gui.Request.cmdAddRecepient.Visible(True)
Gui.Request.cmdAddRecepient.Zorder(0)
Gui.Request.cmdAddRecepient.FontName("Tahoma")
Gui.Request.cmdAddRecepient.FontSize(8.25)
Gui.Request.lbl2.Create(Label,"Extra Recepients (with ; delimiter)",True,2430,210,0,75,1485,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl2.Parent("frEmail")
Gui.Request.lbl2.ForeColor(9145088)
Gui.Request.lbl2.BorderStyle(0)
Gui.Request.lbl10.Create(Label,"Sender",True,720,255,0,75,300,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl10.Parent("frEmail")
Gui.Request.lbl10.ForeColor(9145088)
Gui.Request.lbl10.BorderStyle(0)
Gui.Request.txtSender.Create(TextBox,"",True,3945,300,0,75,555,False,0,"Arial",8,-2147483643,2)
Gui.Request.txtSender.Parent("frEmail")
Gui.Request.txtRecepients.Create(TextBoxR)
Gui.Request.txtRecepients.Size(8385,435)
Gui.Request.txtRecepients.Position(90,1740)
Gui.Request.txtRecepients.Parent("frEmail")
Gui.Request.txtRecepients.TabStop(True)
Gui.Request.txtRecepients.TabIndex(8)
Gui.Request.txtRecepients.Enabled(True)
Gui.Request.txtRecepients.Visible(True)
Gui.Request.txtRecepients.Zorder(0)
Gui.Request.txtRecepients.FontName("Tahoma")
Gui.Request.txtRecepients.FontSize(8.25)
Gui.Request.lbl3.Create(Label,"Subject",True,795,255,0,75,2400,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl3.Parent("frEmail")
Gui.Request.lbl3.ForeColor(9145088)
Gui.Request.lbl3.BorderStyle(0)
Gui.Request.txtSubject.Create(TextBoxR)
Gui.Request.txtSubject.Size(8385,330)
Gui.Request.txtSubject.Position(90,2655)
Gui.Request.txtSubject.Parent("frEmail")
Gui.Request.txtSubject.TabStop(True)
Gui.Request.txtSubject.TabIndex(9)
Gui.Request.txtSubject.Enabled(True)
Gui.Request.txtSubject.Visible(True)
Gui.Request.txtSubject.Zorder(0)
Gui.Request.txtSubject.FontName("Tahoma")
Gui.Request.txtSubject.FontSize(8.25)
Gui.Request.lbl4.Create(Label,"Body",True,795,255,0,75,3165,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl4.Parent("frEmail")
Gui.Request.lbl4.ForeColor(9145088)
Gui.Request.lbl4.BorderStyle(0)
Gui.Request.txtBody.Create(TextBoxR)
Gui.Request.txtBody.Size(8385,3495)
Gui.Request.txtBody.Position(90,3420)
Gui.Request.txtBody.Parent("frEmail")
Gui.Request.txtBody.TabStop(True)
Gui.Request.txtBody.TabIndex(10)
Gui.Request.txtBody.Enabled(True)
Gui.Request.txtBody.Visible(True)
Gui.Request.txtBody.Zorder(0)
Gui.Request.txtBody.FontName("Tahoma")
Gui.Request.txtBody.FontSize(8.25)
Gui.Request.txtCoreBody.Create(TextBoxR)
Gui.Request.txtCoreBody.Visible(False)
Gui.Request.txtCoreBody.Size(2265,450)
Gui.Request.txtCoreBody.Position(6180,525)
Gui.Request.txtCoreBody.Parent("frEmail")
Gui.Request.txtCoreBody.Enabled(True)
Gui.Request.txtCoreBody.Zorder(0)
Gui.Request.txtCoreBody.FontName("Tahoma")
Gui.Request.txtCoreBody.FontSize(8.25)
Gui.Request.lbl5.Create(Label,"Name",True,615,255,0,4830,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl5.BorderStyle(0)
Gui.Request.lblName.Create(Label,"Label",True,3090,255,0,5445,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblName.BorderStyle(0)
Gui.Request.lbl6.Create(Label,"Dept:",True,480,255,0,135,585,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl6.BorderStyle(0)
Gui.Request.lblDept.Create(Label,"Label",True,585,255,0,750,585,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblDept.BorderStyle(0)
Gui.Request.lbl7.Create(Label,"Shift:",True,480,255,0,1650,585,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl7.BorderStyle(0)
Gui.Request.lblShift.Create(Label,"Label",True,300,255,0,2310,585,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblShift.BorderStyle(0)
Gui.Request.lblEmpID.Create(Label,"Label",True,1110,255,0,3735,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblEmpID.BorderStyle(0)
Gui.Request.lbl9.Create(Label,"Employee",True,1035,255,0,2790,270,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl9.BorderStyle(0)
Gui.Request.txtNote.Create(TextBoxR)
Gui.Request.txtNote.Size(8535,675)
Gui.Request.txtNote.Position(120,1590)
Gui.Request.txtNote.TabStop(True)
Gui.Request.txtNote.TabIndex(4)
Gui.Request.txtNote.Enabled(True)
Gui.Request.txtNote.Visible(True)
Gui.Request.txtNote.Zorder(0)
Gui.Request.txtNote.FontName("Tahoma")
Gui.Request.txtNote.FontSize(8.25)
Gui.Request.lbl11.Create(Label,"Note",True,525,255,0,105,1350,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lbl11.BorderStyle(0)
Gui.Request.txtRowIndex.Create(TextBox,"",False,1215,300,0,7335,705,True,0,"Arial",8,-2147483643,1)
Gui.Request.txtRemainingHours.Create(TextBox,"",False,735,300,0,7815,540,False,1,"Arial",8,-2147483643,2)
Gui.Request.lblName2.Create(Label,"PTO Remain.",False,1455,255,0,5955,615,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblName2.BorderStyle(0)
Gui.Request.lblName3.Create(Label,"Pending Approved",False,1455,255,0,5955,960,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblName3.BorderStyle(0)
Gui.Request.txtPendingApproved.Create(TextBox,"",False,735,300,0,7815,900,False,1,"Arial",8,-2147483643,2)
Gui.Request.lblName4.Create(Label,"Est Future PTO Remain.",False,1830,255,0,5955,1320,True,0,"Arial",8,-2147483633,0,0)
Gui.Request.lblName4.BorderStyle(0)
Gui.Request.txtAfterPendingApproved.Create(TextBox,"",False,735,300,0,7815,1245,False,1,"Arial",8,-2147483643,2)
Gui.Request.lblPTONotice.Create(Label,"Not enough PTO hours remaining to approve this request!",False,6075,255,0,1200,9705,True,0,"Arial",12,-2147483633,0,0)
Gui.Request.lblPTONotice.ForeColor(255)
Gui.Request.lblPTONotice.BorderStyle(0)
Gui.Request.cmdBrowseEmail.Create(Button)
Gui.Request.cmdBrowseEmail.Size(525,375)
Gui.Request.cmdBrowseEmail.Position(4275,3405)
Gui.Request.cmdBrowseEmail.Caption("^")
Gui.Request.cmdBrowseEmail.Event(Click,cmdBrowseEmail_Click)
Gui.Request.cmdBrowseEmail.TabStop(True)
Gui.Request.cmdBrowseEmail.TabIndex(6)
Gui.Request.cmdBrowseEmail.Enabled(True)
Gui.Request.cmdBrowseEmail.Visible(True)
Gui.Request.cmdBrowseEmail.Zorder(0)
Gui.Request.cmdBrowseEmail.FontName("Tahoma")
Gui.Request.cmdBrowseEmail.FontSize(8.25)
Gui.F_Note..Create(BaseForm)
Gui.F_Note..Caption("Note")
Gui.F_Note..Size(7920,2805)
Gui.F_Note..MinX(0)
Gui.F_Note..MinY(0)
Gui.F_Note..Position(0,0)
Gui.F_Note..BackColor(-2147483633)
Gui.F_Note..MousePointer(0)
Gui.F_Note..Event(UnLoad,F_Note_UnLoad)
Gui.F_Note..AlwaysOnTop(False)
Gui.F_Note..FontName("Tahoma")
Gui.F_Note..FontSize(8.25)
Gui.F_Note..ControlBox(True)
Gui.F_Note..MaxButton(True)
Gui.F_Note..MinButton(True)
Gui.F_Note..Moveable(True)
Gui.F_Note..Sizeable(True)
Gui.F_Note..ShowInTaskBar(True)
Gui.F_Note..TitleBar(True)
Gui.F_Note.lbl1.Create(Label,"Request ID",True,930,255,0,135,165,True,0,"Arial",8,-2147483633,0,0)
Gui.F_Note.lbl1.BorderStyle(0)
Gui.F_Note.lblReqID.Create(Label,"Label",True,1935,255,0,1080,165,True,0,"Arial",8,-2147483633,0,0)
Gui.F_Note.lblReqID.BorderStyle(0)
Gui.F_Note.txtF_NoteNote.Create(TextBoxR)
Gui.F_Note.txtF_NoteNote.Size(7590,1845)
Gui.F_Note.txtF_NoteNote.Position(90,375)
Gui.F_Note.txtF_NoteNote.Enabled(False)
Gui.F_Note.txtF_NoteNote.Visible(True)
Gui.F_Note.txtF_NoteNote.Zorder(0)
Gui.F_Note.txtF_NoteNote.FontName("Tahoma")
Gui.F_Note.txtF_NoteNote.FontSize(8.25)
Gui.F_Note.txtCalledFrom.Create(TextBox,"",False,1215,300,0,5520,60,True,0,"Arial",8,-2147483643,1)
Gui.F_Note.txtIndex.Create(TextBox,"",False,765,300,0,6885,60,True,0,"Arial",8,-2147483643,1)
Gui.F_Note.cmdNoteOK.Create(Button)
Gui.F_Note.cmdNoteOK.Size(855,375)
Gui.F_Note.cmdNoteOK.Position(45,2310)
Gui.F_Note.cmdNoteOK.Caption("OK")
Gui.F_Note.cmdNoteOK.Event(Click,cmdNoteOK_Click)
Gui.F_Note.cmdNoteOK.Visible(False)
Gui.F_Note.cmdNoteOK.Enabled(True)
Gui.F_Note.cmdNoteOK.Zorder(0)
Gui.F_Note.cmdNoteOK.FontName("Tahoma")
Gui.F_Note.cmdNoteOK.FontSize(8.25)
Gui.F_UnApprove..Create(BaseForm)
Gui.F_UnApprove..Caption("UnApprove")
Gui.F_UnApprove..Size(6690,3765)
Gui.F_UnApprove..MinX(0)
Gui.F_UnApprove..MinY(0)
Gui.F_UnApprove..Position(0,0)
Gui.F_UnApprove..BackColor(-2147483633)
Gui.F_UnApprove..MousePointer(0)
Gui.F_UnApprove..Event(UnLoad,F_UnApprove_UnLoad)
Gui.F_UnApprove..AlwaysOnTop(False)
Gui.F_UnApprove..FontName("Tahoma")
Gui.F_UnApprove..FontSize(8.25)
Gui.F_UnApprove..ControlBox(True)
Gui.F_UnApprove..MaxButton(True)
Gui.F_UnApprove..MinButton(True)
Gui.F_UnApprove..Moveable(True)
Gui.F_UnApprove..Sizeable(True)
Gui.F_UnApprove..ShowInTaskBar(True)
Gui.F_UnApprove..TitleBar(True)
Gui.F_UnApprove.txtReason.Create(TextBoxR)
Gui.F_UnApprove.txtReason.Size(6330,1995)
Gui.F_UnApprove.txtReason.Position(120,450)
Gui.F_UnApprove.txtReason.Enabled(True)
Gui.F_UnApprove.txtReason.Visible(True)
Gui.F_UnApprove.txtReason.Zorder(0)
Gui.F_UnApprove.txtReason.FontName("Tahoma")
Gui.F_UnApprove.txtReason.FontSize(8.25)
Gui.F_UnApprove.lbl1.Create(Label,"Reason",True,1050,255,0,120,225,True,0,"Arial",8,-2147483633,0,0)
Gui.F_UnApprove.lbl1.BorderStyle(0)
Gui.F_UnApprove.chkEmail.Create(CheckBox)
Gui.F_UnApprove.chkEmail.Size(990,300)
Gui.F_UnApprove.chkEmail.Position(120,2460)
Gui.F_UnApprove.chkEmail.Caption("Email")
Gui.F_UnApprove.chkEmail.Value(1)
Gui.F_UnApprove.chkEmail.Enabled(True)
Gui.F_UnApprove.chkEmail.Visible(True)
Gui.F_UnApprove.chkEmail.Zorder(0)
Gui.F_UnApprove.chkEmail.FontName("Tahoma")
Gui.F_UnApprove.chkEmail.FontSize(8.25)
Gui.F_UnApprove.cmdUnApprove.Create(Button)
Gui.F_UnApprove.cmdUnApprove.Size(1065,375)
Gui.F_UnApprove.cmdUnApprove.Position(90,2865)
Gui.F_UnApprove.cmdUnApprove.Caption("UnApprove")
Gui.F_UnApprove.cmdUnApprove.Event(Click,cmdUnApprove_Click)
Gui.F_UnApprove.cmdUnApprove.Enabled(True)
Gui.F_UnApprove.cmdUnApprove.Visible(True)
Gui.F_UnApprove.cmdUnApprove.Zorder(0)
Gui.F_UnApprove.cmdUnApprove.FontName("Tahoma")
Gui.F_UnApprove.cmdUnApprove.FontSize(8.25)
Gui.F_UnApprove.cmdCancel.Create(Button)
Gui.F_UnApprove.cmdCancel.Size(855,375)
Gui.F_UnApprove.cmdCancel.Position(1275,2865)
Gui.F_UnApprove.cmdCancel.Caption("Cancel")
Gui.F_UnApprove.cmdCancel.Event(Click,cmdCancel_Click)
Gui.F_UnApprove.cmdCancel.Enabled(True)
Gui.F_UnApprove.cmdCancel.Visible(True)
Gui.F_UnApprove.cmdCancel.Zorder(0)
Gui.F_UnApprove.cmdCancel.FontName("Tahoma")
Gui.F_UnApprove.cmdCancel.FontSize(8.25)
Gui.F_UnApprove.txtReqID.Create(TextBox,"",False,1215,300,0,180,3435,True,0,"Arial",8,-2147483643,1)
Gui.F_UnApprove.txtSeq.Create(TextBox,"",False,1215,300,0,1545,3450,True,0,"Arial",8,-2147483643,1)
Gui.F_UnApprove.txtDateIn.Create(TextBox,"",False,1215,300,0,2910,3465,True,0,"Arial",8,-2147483643,1)
Gui.F_UnApprove.txtTimeIn.Create(TextBox,"",False,1215,300,0,4305,3480,True,0,"Arial",8,-2147483643,1)
Gui.F_UnApprove.txtTargetEmployee.Create(TextBox,"",False,1215,300,0,150,3825,True,0,"Arial",8,-2147483643,1)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sDeptClause.Declare
v.Global.sDefaultRejectedText.Declare
v.Global.sDefaultApprovedText.Declare
v.Global.sUseGSSPayroll.Declare
v.Global.sPTOVACcodes.Declare
v.Global.sSickVACcodes.Declare
v.Global.sFloatingVACcodes.Declare
v.Global.sUnpaidVACcodes.Declare
v.Global.sFloatingHours.Declare
v.Global.sOptReceiveEmail.Declare
v.Global.sOptReceiveEmailOptionName.Declare
V.Global.sPayCategories.Declare
v.Global.bLoad.Declare
v.Global.sSystemEmail.Declare
V.Global.iFiscalYear.Declare
V.Global.dFiscalStart.Declare
V.Global.dFiscalEnd.Declare
Program.Sub.Preflight.End

Program.Sub.Main.Start
'BN, Jan 2019
'Customer: Life Line Emergency Vehicles
'This project will let employee post request of absences, and let manager approve/reject request
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.bApprovGroup.Declare
	v.Local.bAdminGroup.Declare
	v.Local.sRet.Declare
	V.Local.sTemp.Declare
	V.Local.iYear.Declare
	V.Local.iYearStart.Declare
	V.Local.iYearEnd.Declare
	
	Gui.Request.chkEmail.Value(0)
	
	f.ODBC.Connection!conx.OpenCompanyConnection(5000)
	
'	F.Intrinsic.String.Build("select START_YEAR from V_GL_CALENDAR where BEG_DATE <= '{0}' and END_DATE >= '{0}'",V.Ambient.Date.PervasiveDate,V.Local.sSQL)
'	F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
'	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
'		V.Local.sSQL.Set(V.Ambient.Date.FormatYYYY)
'	F.Intrinsic.Control.EndIf
'	F.Intrinsic.Math.Add(V.Local.sSQL.Long,5,V.Local.iYearStart)
'	F.Intrinsic.Math.Sub(V.Local.sSQL.Long,5,V.Local.iYearEnd)
'	F.Intrinsic.Control.For(V.Local.iYear,V.Local.iYearStart,V.Local.iYearEnd,-1)
'		Gui.Form.ddlYear.AddItem(V.Local.iYear.String)
'	F.Intrinsic.Control.Next(V.Local.iYear)
'	Gui.Form.ddlYear.ListIndex(5)
	
	f.Intrinsic.String.Build("DoNotSendEmail_{0}",v.Caller.User,v.Global.sOptReceiveEmailOptionName)
	f.Intrinsic.String.Build("Select OptionValue from GCG_6138_Maintenance where OptionName = '{0}'",v.Global.sOptReceiveEmailOptionName,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"1")
		gui.Form.chkReceiveEmail.Value(True)
	f.Intrinsic.Control.EndIf
	
	'Check if user is not in security group
	F.Global.Security.IsInGroup(V.Caller.User,"ABSADMIN",V.Caller.CompanyCode,V.Local.bAdminGroup)
	F.Intrinsic.Control.If(V.Caller.User,=,"SUPERVSR")
		V.Local.bAdminGroup.Set(True)
	F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.If(v.Local.bAdminGroup)
		v.Global.sDeptClause.Set("")
		f.Intrinsic.Control.CallSub("Prepare")
'		F.Intrinsic.Control.CallSub(FindFiscalYearBegin)
		f.Intrinsic.Control.CallSub("Bind_Requests")
		gui.Form.txtMode.Text("Administrator")		
		gui.Form..Show
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'If user is not Admin, check if he/she is a supervisor
	f.Intrinsic.String.Build("Select Distinct UserID,BalGroup,EC from GCG_6138_Supervisors where UserID = '{0}'",v.Caller.User,v.Local.sSQL)	
	f.Data.DataTable.CreateFromSQL("UserDept","conx",v.Local.sSQL,True)
	f.Data.DataView.Create("UserDept","UserDeptDV")
	f.Data.DataView.Create("UserDept","BalGrpAll")
	f.Data.DataView.Create("UserDept","ECAll")
	f.Data.DataView.Create("UserDept","BalGrpECAll")
	F.Data.DataView.SetFilter("UserDept","UserDeptDV","[BalGroup] <> 'All' and [EC] <> 'All'")
	F.Data.DataView.SetFilter("UserDept","BalGrpAll","[BalGroup] = 'All' and [EC] <> 'All'")
	F.Data.DataView.SetFilter("UserDept","ECAll","[BalGroup] <> 'All' and [EC] = 'All'")
	F.Data.DataView.SetFilter("UserDept","BalGrpECAll","[BalGroup] = 'All' and [EC] = 'All'")

	f.Intrinsic.Control.If(v.DataView.UserDept!UserDeptDV.RowCount,=,0,and,v.DataView.UserDept!BalGrpAll.RowCount,=,0,v.DataView.UserDept!ECAll.RowCount,=,0,v.DataView.UserDept!BalGrpECAll.RowCount,=,0)
		f.Intrinsic.UI.Msgbox("You are not configured to manage any balance group/earnings code in the Absence Approval program. Please contact Administrator to configure that by using the Maintenance - Absence Request program.","Attention")			
		f.Intrinsic.Control.CallSub("Unload")
	f.Intrinsic.Control.EndIf
	'Build DeptClause
	V.Global.sDeptClause.Set("where")
	F.Intrinsic.Control.If(V.DataView.UserDept!UserDeptDV.RowCount,>,0)
		f.Data.DataView.ToString("UserDept","UserDeptDV","BalGroup*!*EC","*!*","','",v.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
		f.Intrinsic.String.Build("{0} BalGrp+EC in ('{1}')",v.Global.sDeptClause,V.Local.sTemp,v.Global.sDeptClause)
		F.Intrinsic.Control.If(V.DataView.UserDept!BalGrpAll.RowCount,>,0,or,V.DataView.UserDept!ECAll.RowCount,>,0,V.DataView.UserDept!BalGrpECAll.RowCount,>,0)
			F.Intrinsic.String.Build("{0} or",V.Global.sDeptClause,V.Global.sDeptClause)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataView.UserDept!BalGrpAll.RowCount,>,0)
		f.Data.DataView.ToString("UserDept","BalGrpAll","EC","","','",v.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
		f.Intrinsic.String.Build("{0} EC in ('{1}')",v.Global.sDeptClause,V.Local.sTemp,v.Global.sDeptClause)
		F.Intrinsic.Control.If(V.DataView.UserDept!ECAll.RowCount,>,0,or,V.DataView.UserDept!BalGrpECAll.RowCount,>,0)
			F.Intrinsic.String.Build("{0} or",V.Global.sDeptClause,V.Global.sDeptClause)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(v.DataView.UserDept!ECAll.RowCount,>,0)
		F.Data.DataView.ToString("UserDept","ECAll","BalGroup","","','",V.Local.sTemp)
		F.Intrinsic.String.Replace(V.Local.sTemp,"*!*","",V.Local.sTemp)
		f.Intrinsic.String.Build("{0} BalGrp in ('{1}')",v.Global.sDeptClause,V.Local.sTemp,v.Global.sDeptClause)
		F.Intrinsic.Control.If(V.DataView.UserDept!BalGrpECAll.RowCount,>,0)
			F.Intrinsic.String.Build("{0} or",V.Global.sDeptClause,V.Global.sDeptClause)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.If(V.DataView.UserDept!BalGrpECAll.RowCount,>,0)
		F.Intrinsic.String.Build("{0} BalGrp like '%'",V.Global.sDeptClause,V.Global.sDeptClause)
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.CallSub("Prepare")
'	F.Intrinsic.Control.CallSub(FindFiscalYearBegin)
	f.Intrinsic.Control.CallSub("Bind_Requests")
	gui.Form.txtMode.Text("Manager")	
	gui.Form..Show		
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry

Program.Sub.Main.End

Program.Sub.Prepare.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.iCnt.Declare
	v.Local.sRet.Declare
	v.Local.sSQL.Declare
	V.Local.sPayCat.Declare

	'Prepare
	'0 - None 
	'1 - Top 
	'2 Bottom  
	'4 - Left 
	'8 - Right
	gui.Form.gsRequests.Anchor(15)
	'gui.Form.cmdLoad.Anchor(9)
	'gui.Form.cmdExport.Anchor(9)
	'gui.Form.ddlPeriod.Anchor(9)
	gui.Form.proBar1.Anchor(12)
	
	gui.Form.txtUser.Text(v.Caller.User)
	
	gui.Form.ddlPeriod.AddItem("All")
	gui.Form.ddlPeriod.AddItem("Current Year")
	gui.Form.ddlPeriod.AddItem("Last 3 Years")
	gui.Form.ddlPeriod.AddItem("Last 365 days")
	gui.Form.ddlPeriod.AddItem("Last 180 days")
	gui.Form.ddlPeriod.AddItem("Last 30 days")
	gui.Form.ddlPeriod.ListIndex(2)
	
	'Bind autocomplete for email textbox of the process screen
	f.Intrinsic.Control.If(v.DataTable.Emails.Exists)
		f.Data.DataTable.Close("Emails")
	f.Intrinsic.Control.EndIf
	f.Data.DataTable.CreateFromSQL("Emails","conx","Select Employee,rtrim(PR_User_ID) as User_ID,rtrim(EMAIL_ADDR) as Empl_Email, '' as User_Email from Employee_MSTR where EMAIL_ADDR <> '' and DATE_TERMINATION = '000000'",True)
	F.Intrinsic.String.Build("select rtrim(GS_USER) as USER_ID, rtrim(EMAIL) as Email from USER_INFORMATION where COMPANY_SPECIFIC = 0 or (COMPANY_SPECIFIC = 1 and COMPANY = '{0}')",V.Caller.CompanyCode,V.Local.sSQL)
	F.ODBC.Connection!common.OpenCommonConnection
	F.Data.Dictionary.CreateFromSQL("Users","common",V.Local.sSQL)
	F.ODBC.Connection!common.Close
	F.Data.Dictionary.SetDefaultReturn("Users","")
	F.Data.DataTable.FillFromDictionary("Emails","Users","USER_ID","User_Email")
	F.Data.Dictionary.Close("Users")
	F.Data.DataTable.AddExpressionColumn("Emails","Email","String","iif([User_Email] = '', [Empl_Email], [User_Email])")
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.Emails.RowCount--,1)
		gui.Request.txtEmail.AddAutoCompleteItem(v.DataTable.Emails(v.Local.iCnt).Email!FieldValTrim)
	f.Intrinsic.Control.Next(v.Local.iCnt)
	f.Data.DataView.Create("Emails","EmailsDV")
	
	'Get Default Rejected and Approved text
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'DefaultRejectedText'",v.Global.sDefaultRejectedText)
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'DefaultApprovedText'",v.Global.sDefaultApprovedText)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'UseGSSPayroll'",v.Global.sUseGSSPayroll)
	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'PTOVAC'",v.Global.sPTOVACcodes)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'SICKVAC'",v.Global.sSickVACcodes)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'FLOATINGVAC'",v.Global.sFloatingVACcodes)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'UNPAIDVAC'",v.Global.sUnpaidVACcodes)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'FLOATINGBEGINNING'",v.Global.sFloatingHours)	
	f.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'SystemEmail'",v.Global.sSystemEmail)
	F.ODBC.Connection!conx.ExecuteAndReturn("select rtrim(ltrim(OptionValue)) from GCG_6138_Maintenance where OptionName = 'PayCategories'",V.Local.sPayCat)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF.Not)
		F.Intrinsic.String.Split(V.Local.sPayCat,"@@@",V.Local.sPayCat)
		F.Intrinsic.Control.For(V.Local.iCnt,0,V.Local.sPayCat.UBound,1)
			V.Local.sPayCat(V.Local.iCnt).Set(V.Local.sPayCat(V.Local.iCnt).Left2)
			V.Local.sPayCat(V.Local.iCnt).Set(V.Local.sPayCat(V.Local.iCnt).Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.String.Join(V.Local.sPayCat,"', '",V.Global.sPayCategories)
		V.Local.sPayCat.Redim(0,0)
	F.Intrinsic.Control.Else
		V.Global.sPayCategories.Set("NONE")
	F.Intrinsic.Control.EndIf
	
	'Check if user links to an employee ID
	f.Intrinsic.String.Build("Select Employee,Name,EMAIL_ADDR from Employee_Mstr where PR_User_ID = '{0}'",v.Caller.User,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet,<>,"")
		f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
		gui.Form.txtEmpID.Text(v.Local.sRet(0))
		gui.Form.txtEmpName.Text(v.Local.sRet(1).Trim)	
		gui.Form.txtEmail.Text(v.Local.sRet(2).Trim)
		gui.Request.txtSender.Text(v.Local.sRet(2).Trim)
	f.Intrinsic.Control.EndIf	
	f.Intrinsic.Control.If(v.Caller.User.UCase,=,"SUPERVSR")
		gui.Request.txtSender.Text(V.Global.sSystemEmail)
	f.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Prepare.End

Program.Sub.UnLoad.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare

	F.Intrinsic.Control.If(V.ODBC.conx.State,=,1)
		F.ODBC.Connection!conx.close
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.EndTry
Program.Sub.UnLoad.End

Program.Sub.Form_UnLoad.Start
f.Intrinsic.Control.If(v.Global.bLoad)
	f.Intrinsic.Control.CallSub("Serialize")
f.Intrinsic.Control.EndIf
f.Intrinsic.Control.CallSub("Unload")
Program.Sub.Form_UnLoad.End

Program.Sub.Bind_Requests.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.iCnt.Declare
	v.Local.sRet.Declare
	v.Local.sPeriodClause.Declare
	v.Local.sEmployee.Declare
	
	v.Local.dLast30Date.Declare
	v.Local.dLast180Date.Declare
	v.Local.dLast365Date.Declare
	v.Local.dLast3YearsDate.Declare
	v.Local.sDateInClause.Declare
	v.Local.sWhereClause.Declare
	v.Local.fHours.Declare
	v.Local.fMinutes.Declare
	v.Local.fHoursFromMinutes.Declare
	v.Local.fVacationLeft.Declare
	v.Local.bExist.Declare
	v.Local.dDateImport.Declare
	v.Local.sHold.Declare
	v.Local.sExpression.Declare
		
	f.Intrinsic.Date.DateAdd("D",-30,v.Ambient.Date,v.Local.dLast30Date)	
	f.Intrinsic.Date.DateAdd("D",-180,v.Ambient.Date,v.Local.dLast180Date)	
	f.Intrinsic.Date.DateAdd("D",-365,v.Ambient.Date,v.Local.dLast365Date)
	f.Intrinsic.Date.DateAdd("YYYY",-3,v.Ambient.Date,v.Local.dLast3YearsDate)
	
	'Build DateInClause
	f.Intrinsic.Control.SelectCase(v.Screen.Form!ddlPeriod.Text)
		f.Intrinsic.Control.Case("All")
			v.Local.sDateInClause.Set("")
		f.Intrinsic.Control.Case("Last 3 years")
			f.Intrinsic.String.Build(" DateIn >= '{0}'",v.Local.dLast3YearsDate.PervasiveDate,v.Local.sDateInClause)	
		f.Intrinsic.Control.Case("Current Year")
			F.Intrinsic.String.Build(" DateIn between '{0}-01-01' and '{0}-12-31'",V.Ambient.Date.FormatYYYY,V.Local.sDateInClause)
		f.Intrinsic.Control.Case("Last 365 days")
			f.Intrinsic.String.Build(" DateIn >= '{0}'",v.Local.dLast365Date.PervasiveDate,v.Local.sDateInClause)	
		f.Intrinsic.Control.Case("Last 180 days")
			f.Intrinsic.String.Build(" DateIn >= '{0}'",v.Local.dLast180Date.PervasiveDate,v.Local.sDateInClause)	
		f.Intrinsic.Control.Case("Last 30 days")
			f.Intrinsic.String.Build(" DateIn >= '{0}'",v.Local.dLast30Date.PervasiveDate,v.Local.sDateInClause)	
		f.Intrinsic.Control.CaseElse
			f.Intrinsic.String.Build(" DateIn >= '{0}'",v.Local.dLast3YearsDate.PervasiveDate,v.Local.sDateInClause)			
	f.Intrinsic.Control.EndSelect	
	
	f.Intrinsic.Control.If(v.Global.sDeptClause,<>,"")
		f.Intrinsic.Control.If(v.Local.sDateInClause,<>,"")
			f.Intrinsic.String.Build("{0} and {1}",v.Global.sDeptClause,v.Local.sDateInClause,v.Local.sWhereClause)
		f.Intrinsic.Control.Else
			v.Local.sWhereClause.Set(v.Global.sDeptClause)
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.Else
		f.Intrinsic.Control.If(v.Local.sDateInClause,<>,"")
			f.Intrinsic.String.Build("Where {0}",v.Local.sDateInClause,v.Local.sWhereClause)
		f.Intrinsic.Control.Else
			v.Local.sWhereClause.Set("")
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.If(V.Local.sWhereClause,!=,"")
'		F.Intrinsic.String.Build("{0} and DateIn between '{1}' and '{2}'",V.Local.sWhereClause,V.Global.dFiscalStart.PervasiveDate,V.Global.dFiscalEnd.PervasiveDate,V.Local.sWhereClause)
'	F.Intrinsic.Control.Else
'		F.Intrinsic.String.Build("where DateIn between '{0}' and '{1}'",V.Global.dFiscalStart.PervasiveDate,V.Global.dFiscalEnd.PervasiveDate,V.Local.sWhereClause)
'	F.Intrinsic.Control.EndIf
		
	'Get all Approved Records after the import Date
'	f.ODBC.Connection!conx.ExecuteAndReturn("Select Top 1 DateImport from GCG_6138_Date_Import order by DateImport Desc",v.Local.sRet)
'	f.Intrinsic.Control.If(v.Local.sRet,=,"")
'		f.Intrinsic.UI.Msgbox("Please specify Date Import/Date of the last Payroll or contact Global Shop Solutions Service","Attention")
'		f.Intrinsic.Control.CallSub("Unload")
'	f.Intrinsic.Control.Else
'		v.Local.dDateImport.Set(v.Local.sRet)
'		f.Intrinsic.String.Format(v.Local.dDateImport,"MM/DD/YYYY",v.Local.sRet)
'		gui.Form.lblStartingDate4PendingAppr.Caption(v.Local.sRet)
'	f.Intrinsic.Control.EndIf
	
	'Changing Date Import to last date PY was processed
'	F.ODBC.Connection!conx.ExecuteAndReturn("select cast(dateadd(day, WEEKDAY(max(CHECK_PERIOD_END)) * -1 + 1, max(CHECK_PERIOD_END)) as date) from V_PAY_HIST_EARN where EARN_DD_FLAG = 'D';",V.Local.dDateImport)
	F.ODBC.Connection!conx.ExecuteAndReturn("select cast(dateadd(day, WEEKDAY(max(DATE_HISTORY)) * -1 + 1, max(DATE_HISTORY)) as date) from V_PAY_HIST_EARN where EARN_DD_FLAG = 'D';",V.Local.dDateImport)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		V.Local.dDateImport.Set(V.Ambient.MinDate)
	F.Intrinsic.Control.EndIf
	
'	f.Data.Dictionary.Exists("PendingApprovedDict",v.Local.bExist)
'	f.Intrinsic.Control.If(v.Local.bExist)
'		f.Data.Dictionary.Close("PendingApprovedDict")
'		f.Data.Dictionary.Close("SickApprovedDict")
'		f.Data.Dictionary.Close("FloatingApprovedDict")
'	f.Intrinsic.Control.EndIf
'	f.Intrinsic.String.Build("Select Employee,sum(HoursHH + HoursMM/60) as PendingApproved  from GCG_6138_ABSENCE where Status = 'In Process' and EC = '{0}' and Paid = 'Y' Group by Employee",v.Global.sPTOVACcodes,v.Local.sSQL)
'	f.Data.Dictionary.CreateFromSQL("PendingApprovedDict","conx",v.Local.sSQL)
'	f.Data.Dictionary.SetDefaultReturn("PendingApprovedDict",0)	
'	f.Intrinsic.String.Build("Select Employee,sum(HoursHH + HoursMM/60) as PendingApproved  from GCG_6138_ABSENCE where Status = 'In Process' and EC = '{0}' and Paid = 'Y' Group by Employee",v.Global.sSickVACcodes,v.Local.sSQL)
'	f.Data.Dictionary.CreateFromSQL("SickApprovedDict","conx",v.Local.sSQL)
'	f.Data.Dictionary.SetDefaultReturn("SickApprovedDict",0)	
'	f.Intrinsic.String.Build("Select Employee,sum(HoursHH + HoursMM/60) as PendingApproved  from GCG_6138_ABSENCE where Status = 'In Process' and EC = '{0}' and Paid = 'Y' Group by Employee",v.Global.sFloatingVACcodes,v.Local.sSQL)
'	f.Data.Dictionary.CreateFromSQL("FloatingApprovedDict","conx",v.Local.sSQL)
'	f.Data.Dictionary.SetDefaultReturn("FloatingApprovedDict",0)	
		
	'Get requests
	f.Intrinsic.Control.If(v.DataTable.Requests.Exists)
		f.Data.DataTable.Close("Requests")
	f.Intrinsic.Control.EndIf
	f.Intrinsic.String.build("Select ReqID + '-' + Seq as RequestID,ReqID,Seq,Employee,'' as Name,Shift,Dept,BalGrp,Absence_Desc,DateIn,TimeIn,DateOut,TimeOut,Hours,TimeInChar,TimeOutChar,HoursHH,HoursMM,rtrim(Note) as Note,EC,rtrim(ECDescr) as ECDescr,Paid,Status,cast(0 as Bit) as Approve,cast(0 as Bit) as Reject,DateTimeProcess,ProcByUser,ProcByEmp,rtrim(ProcByEmpName) as ProcByEmpName,Email,rtrim(ProcNote) as ProcNote, DateTimeSubmitted as DateTimeSubDel, DateTimeStart from GCG_6138_Absence {0} Order by Employee,ReqID,Seq",v.Local.sWhereClause,V.Global.sPTOVACcodes,V.Global.sSickVACcodes,V.Global.sFloatingVACcodes,v.Local.sSQL)
	f.Data.DataTable.createFromSQL("Requests","conx",v.Local.sSQL,True)
'	f.Data.DataTable.FillFromDictionary("Requests","PendingApprovedDict","Employee","PendingApproved")
'	f.Data.DataTable.FillFromDictionary("Requests","SickApprovedDict","Employee","SickPendingApproved")
'	f.Data.DataTable.FillFromDictionary("Requests","FloatingApprovedDict","Employee","FloatingPendingApproved")
	f.Data.DataView.Create("Requests","RequestsDV")
	
	'add DateTimeSubmitted
	F.Data.DataTable.AddColumn("Requests","Date2010","DateTime",1/1/2010 12:00:00 AM)
	F.Data.DataTable.AddColumn("Requests","DateTimeSubmitted","DateTime")
	F.Data.DataTable.DateAdd("Requests","Date2010","h","DateTimeSubDel","DateTimeSubmitted")
	
	'TODO: Add date Diff Column
	F.Intrinsic.String.Build("isnull([DateTimeStart], 0) - isnull([DateTimeSubDel], 0) < 24 and [Status] = 'In Process' and [EC] in ('{0}', '{1}')",V.Global.sPTOVACcodes,V.Global.sUnpaidVACcodes,V.Local.sExpression)
	F.Data.DataTable.AddExpressionColumn("Requests","Unexcused","Boolean",V.Local.sExpression)
	'add button for admin users to override the 'excused' check
	F.Data.DataTable.AddExpressionColumn("Requests","Excuse_CMD","String","iif([Unexcused],'Excuse','')")
	
	F.Data.Dictionary.CreateFromSQL("dictHireDate","conx","select EMPLOYEE, DATE_HIRE from V_EMPLOYEE_MSTR;")
	F.Data.DataTable.AddColumn("Requests","DATE_HIRE","Date")
	F.Data.Dictionary.SetDefaultReturn("dictHireDate",V.Ambient.MinDate)
	F.Data.DataTable.FillFromDictionary("Requests","dictHireDate","EMPLOYEE","DATE_HIRE")
	F.Data.Dictionary.Close("dictHireDate")
		
	f.Data.Dictionary.CreateFromSQL("EmpDict","conx","Select Employee,rtrim(Name) from Employee_Mstr")
	f.Data.Dictionary.SetDefaultReturn("EmpDict","")
	f.Data.DataTable.FillFromDictionary("Requests","EmpDict","Employee","Name")
	f.Data.Dictionary.Close("EmpDict")
	
	f.Data.DataTable.AddExpressionColumn("Requests","Paid2","String","IIF(Paid = 'Y','Yes','No')")
	f.Data.DataTable.AddColumn("Requests","PTO","Float")
	f.Data.DataTable.AddColumn("Requests","Sick_Time","Float")
	f.Data.DataTable.AddColumn("Requests","Floating_Time","Float")
	
	'Check and close Dictionary. This Dictionary is open throughout the program
	f.Data.Dictionary.Exists("VacDict",v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist)
		f.Data.Dictionary.Close("VacDict")
		f.Data.Dictionary.Close("SickDict")
		f.Data.Dictionary.Close("FloatingDict")
	f.Intrinsic.Control.EndIf
'	F.Intrinsic.String.Build("Select A.Employee,A.Vacation_Left - isnull(sum(B.Hours_HH + B.Hours_MM/60), 0) from Employee_Mstr A left join (select C.Hours_HH, C.Hours_MM, C.Employee from V_TIME_ATTENDANCE C where Date_In > isnull((select max(CK_DATE) from V_PAYROLL_CHECKS where EMPL_NO = C.Employee), '1900-01-01') and REC_TYPE = 'A' and Earnings_Code = '{1}' and Paid = 'Y') B on A.EMPLOYEE = B.EMPLOYEE group by A.EMPLOYEE, A.VACATION_LEFT;",V.Local.dDateImport.PervasiveDate,V.Global.sPTOVACcodes,V.Local.sSQL)
'	f.Data.Dictionary.CreateFromSQL("VacDict","conx",V.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("dtEmplMstr","conx","select Employee, Vacation_Left, Sick_Left from V_Employee_Mstr")
	F.Intrinsic.String.Build("select Employee, Hours_HH + Hours_MM/60 as HoursTot, Date_In from V_TIME_ATTENDANCE where REC_TYPE = 'A' and Earnings_Code = '{0}' and Paid = 'Y'",V.Global.sPTOVACcodes,V.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("dtTandA","conx",V.Local.sSQL)
'	f.Data.DataTable.CreateFromSQL("dtPayrollChk","conx","select EMPL_NO, max(CK_DATE) as CUTOFF from V_PAYROLL_CHECKS group by EMPL_NO")
'	f.Data.DataTable.CreateFromSQL("dtPayrollChk","conx","select EMPLOYEE as EMPL_NO, cast(dateadd(day, WEEKDAY(max(CHECK_PERIOD_END)) * -1 + 1, max(CHECK_PERIOD_END)) as date) as CUTOFF from V_PAY_HIST_EARN group by EMPLOYEE")
	f.Data.DataTable.CreateFromSQL("dtPayrollChk","conx","select EMPLOYEE as EMPL_NO, cast(dateadd(day, WEEKDAY(max(DATE_HISTORY)) * -1 + 1, max(DATE_HISTORY)) as date) as CUTOFF from V_PAY_HIST_EARN group by EMPLOYEE")
	F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtEmplMstr*!*EMPL",V.Enum.LinqSourceType!DataTable,"dtPayrollChk*!*CHK","EMPL.Employee = CHK.EMPL_NO",V.Enum.LinqSourceType!DataTable,"dtTandA*!*TNA","EMPL.Employee = TNA.Employee","EMPL.Employee*!*TNA.HoursTot*!*CHK.CUTOFF*!*TNA.Date_In","","","","dtVacAll",False)
	F.Data.DataTable.AddExpressionColumn("dtVacAll","HoursAct","Float","iif(isnull(CUTOFF, #1/1/1900#) < isnull(Date_In, #1/1/1900#), isnull(HoursTot, 0), 0)")
	F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtEmplMstr*!*EMPL",V.Enum.LinqSourceType!DataTable,"dtVacAll*!*CALC","EMPL.Employee = CALC.Employee","EMPL.Employee*!*EMPL.Vacation_Left*!*sum(CALC.HoursAct) as HoursSum","","EMPL.Employee,EMPL.Vacation_Left","","dtVac",False)
	F.Data.DataTable.AddExpressionColumn("dtVac","Vacation","Float","[Vacation_Left] - isnull([HoursSum], 0)")
	F.Data.Dictionary.CreateFromDataTable("VacDict","dtVac","Employee","Vacation")
	F.Data.DataTable.Close("dtTandA")
	F.Data.DataTable.Close("dtVacAll")
	F.Data.DataTable.Close("dtVac")
'	F.Intrinsic.String.Build("Select A.Employee,A.Sick_Left - isnull(sum(B.Hours_HH + B.Hours_MM/60), 0) from Employee_Mstr A left join (select C.Hours_HH, C.Hours_MM, C.Employee from V_TIME_ATTENDANCE C where Date_In > isnull((select max(CK_DATE) from V_PAYROLL_CHECKS where EMPL_NO = C.Employee), '1900-01-01') and REC_TYPE = 'A' and Earnings_Code = '{1}' and Paid = 'Y') B on A.EMPLOYEE = B.EMPLOYEE group by A.EMPLOYEE, A.Sick_Left;",V.Local.dDateImport.PervasiveDate,V.Global.sSickVACcodes,V.Local.sSQL)
'	f.Data.Dictionary.CreateFromSQL("SickDict","conx",V.Local.sSQL)
	F.Intrinsic.String.Build("select Employee, Hours_HH + Hours_MM/60 as HoursTot, Date_In from V_TIME_ATTENDANCE where REC_TYPE = 'A' and Earnings_Code = '{1}' and Paid = 'Y'",V.Global.sSickVACcodes,V.Local.sSQL)
	f.Data.DataTable.CreateFromSQL("dtTandA","conx",V.Local.sSQL)
	F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtEmplMstr*!*EMPL",V.Enum.LinqSourceType!DataTable,"dtPayrollChk*!*CHK","EMPL.Employee = CHK.EMPL_NO",V.Enum.LinqSourceType!DataTable,"dtTandA*!*TNA","EMPL.Employee = TNA.Employee","EMPL.Employee*!*TNA.HoursTot*!*CHK.CUTOFF*!*TNA.Date_In","","","","dtSickAll",False)
	F.Data.DataTable.AddExpressionColumn("dtSickAll","HoursAct","Float","iif(isnull(CUTOFF, #1/1/1900#) < isnull(Date_In, #1/1/1900#), isnull(HoursTot, 0), 0)")
	F.Data.Linq.Join(V.Enum.LinqJoinType!LeftJoin,V.Enum.LinqSourceType!DataTable,"dtEmplMstr*!*EMPL",V.Enum.LinqSourceType!DataTable,"dtSickAll*!*CALC","EMPL.Employee = CALC.Employee","EMPL.Employee*!*EMPL.Sick_Left*!*sum(CALC.HoursAct) as HoursSum","","EMPL.Employee,EMPL.Sick_Left","","dtSick",False)
	F.Data.DataTable.AddExpressionColumn("dtSick","Sick","Float","[Sick_Left] - isnull([HoursSum], 0)")
	F.Data.Dictionary.CreateFromDataTable("SickDict","dtSick","Employee","Sick")
	F.Data.DataTable.Close("dtEmplMstr")
	F.Data.DataTable.Close("dtTandA")
	F.Data.DataTable.Close("dtPayrollChk")
	F.Data.DataTable.Close("dtSickAll")
	F.Data.DataTable.Close("dtSick")
	f.Intrinsic.String.Build("Select Employee, {2} - sum(HoursHH + HoursMM/60) as PendingApproved  from GCG_6138_ABSENCE where Status = 'Approved' and DATEIN > '{0}' and EC = '{1}' and Paid = 'Y' Group by Employee",V.Ambient.Date.PervasiveDate,V.Global.sFLOATINGVACcodes,v.Global.sFloatingHours.Left20,v.Local.sSQL)
	f.Data.Dictionary.CreateFromSQL("FloatingDict","conx",V.Local.sSQL)
	
'	'Process Vacation left	
'	f.Intrinsic.Control.If(v.Global.sUseGSSPayroll,=,"Y")
'		'Vacation left = Employee_Mstr.Vacation_Left - expected Vacation taken in the future
'		'Get expected Vacation taken in the future
'		gui.Form.lblProgress.Visible(True)
'		gui.Form.proBar1.Visible(True)
'		f.Data.Dictionary.CreateFromSQL("PreVacDict","conx","Select Employee,Vacation_Left from Employee_Mstr")	
'		f.Data.Dictionary.SetDefaultReturn("PreVacDict",0)
'		
'		'Create VacDict and add item employee,vacation_left in which vacation_left = Employee_Mstr.Vacation_Left - expected Vacation taken in the future
'		f.Data.Dictionary.Create("VacDict")
'		'Get distinct employee
'		f.Data.DataView.ToDataTableDistinct("Requests","RequestsDV","EmployeeDistinct","Employee",True)
'		f.Intrinsic.Control.If(v.DataTable.EmployeeDistinct.RowCount,>,0)
'			gui.Form.proBar1.Max(v.DataTable.EmployeeDistinct.RowCount)
'		f.Intrinsic.Control.EndIf
'		'Get PTOVAC codes
'		f.Intrinsic.String.Replace(v.Global.sPTOVACcodes,",","','",v.Local.sPTOVACcodes)
'		'Loop employee and get the Vacation Left
'		f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.EmployeeDistinct.RowCount--,1)
'			gui.Form.proBar1.Value(v.Local.iCnt)
'			v.Local.sEmployee.Set(v.DataTable.EmployeeDistinct(v.Local.iCnt).Employee!FieldValString)
'			f.Intrinsic.String.Build("Select sum(Hours_HH) as HoursTaken,sum(Hours_MM) as MinutesTaken from V_Time_attendance where Employee = '{0}' and Rec_Type = 'A' and Date_Out > '{1}' and Earnings_code in ('{2}') ",v.Local.sEmployee,v.Ambient.Date.PervasiveDate,v.Local.sPTOVACcodes,v.Local.sSQL)
'			f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
'			f.Intrinsic.Control.if(v.Local.sRet,<>,"")
'				f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.sRet)
'				v.Local.fHours.Set(v.Local.sRet(0))
'				v.Local.fMinutes.Set(v.Local.sRet(1))
'				f.Intrinsic.Math.Div(v.Local.fMinutes,60,v.Local.fHoursFromMinutes)
'				f.Intrinsic.Math.Add(v.Local.fHours,v.Local.fHoursFromMinutes,v.Local.fHours)
'				f.Intrinsic.Math.Sub(v.Dictionary.PreVacDict![v.Local.sEmployee],v.Local.fHours,v.Local.fVacationLeft)
'				f.Data.Dictionary.AddItem("VacDict",v.Local.sEmployee,v.Local.fVacationLeft)				
'			f.Intrinsic.Control.EndIf			
'		f.Intrinsic.Control.Next(v.Local.iCnt)
'		'Terminate processing
'		f.Data.DataTable.Close("EmployeeDistinct")
'		f.Data.Dictionary.Close("PreVacDict")
'		gui.Form.lblProgress.Visible(False)
'		gui.Form.proBar1.Visible(False)
'		
'	f.Intrinsic.Control.Else
'		f.Data.Dictionary.CreateFromSQL("VacDict","conx","Select Employee,Vacation_Left from Employee_Mstr")	
'	f.Intrinsic.Control.EndIf	
		
	
	'Populate Vacation Left
	f.Data.Dictionary.SetDefaultReturn("VacDict",0)
	f.Data.DataTable.FillFromDictionary("Requests","VacDict","Employee","PTO")	
	
	'Populate Sick Left
	f.Data.Dictionary.SetDefaultReturn("SickDict",0)
	f.Data.DataTable.FillFromDictionary("Requests","SickDict","Employee","Sick_Time")	
	
	f.Data.Dictionary.SetDefaultReturn("FloatingDict",V.Global.sFloatingHours.Float)
	f.Data.DataTable.FillFromDictionary("Requests","FloatingDict","Employee","Floating_Time")	
	
	'PTO left after deducting pending approved
	'Okay this is gonna suck. Need to do 'PTO MRP' or PTORP and this needs it its own subroutine
	F.Intrinsic.Control.CallSub(PTORP)
'	f.Data.DataTable.AddExpressionColumn("Requests","PTOLeftAfterAppr","float","PTO - PendingApproved")
'	f.Data.DataTable.AddExpressionColumn("Requests","SickLeftAfterAppr","float","Sick_Time - SickPendingApproved")
'	f.Data.DataTable.AddExpressionColumn("Requests","FloatingLeftAfterAppr","float","Floating_Time - FloatingPendingApproved")
	
	'Add Hours in Decimal	
	f.Data.DataTable.AddExpressionColumn("Requests","HoursDec","Float","HoursHH + (HoursMM / 60)")
	
	'Add UnApprove column
	'Rework 4 Mar 2021 - adjust UnApprove Column to only allow UnApprovals if the Payroll lock flag is on
	'OKAY so, this math is gonna get weird. We need to query TIME_ATTENDANCE without adding a lot of loading time. to do this, we query for Earning Codes that are in the maintenance table, and by using min and max date of approved records.
	F.Intrinsic.String.Build("select EMPLOYEE, DATE_IN, cast(TIME_IN as char(5)) as TIME_IN, DATE_OUT, cast(TIME_OUT as char(5)) as TIME_OUT, DEPT, SHIFT, REC_TYPE, EARNINGS_CODE, PAYROLL_LOCK from V_TIME_ATTENDANCE where EARNINGS_CODE in ('{0}');",V.Global.sPayCategories,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtPayRollLockCheck","conx",V.Local.sSQL,True)
	F.Data.DataView.Create("dtPayRollLockCheck","dv")
	F.Data.DataTable.AddColumn("Requests","PAYROLL_LOCK","Boolean",False)
	F.Data.DataView.Create("Requests","dvApproved")
	F.Data.DataView.SetFilter("Requests","dvApproved","[Status] = 'Approved'")
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataView.Requests!dvApproved.RowCount--,1)
		F.Intrinsic.String.Build("[EMPLOYEE] = '{0}' and [DATE_IN] = #{1}# and [TIME_IN] = '{2}' and [DATE_OUT] = #{3}# and [TIME_OUT] = '{4}' and [DEPT] = '{5}' and [SHIFT] = '{6}' and [EARNINGS_CODE] = '{7}'",V.DataView.Requests!dvApproved(V.Local.iCnt).Employee!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).DateIn!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).TimeIn!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).DateOut!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).TimeOut!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).Dept!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).Shift!FieldVal,V.DataView.Requests!dvApproved(V.Local.iCnt).EC!FieldVal,V.Local.sExpression)
		F.Data.DataView.SetFilter("dtPayRollLockCheck","dv",V.Local.sExpression)
		F.Intrinsic.Control.If(V.DataView.dtPayRollLockCheck!dv.RowCount,>,0)
			F.Data.DataView.SetValue("Requests","dvApproved",V.Local.iCnt,"PAYROLL_LOCK",V.DataView.dtPayRollLockCheck!dv(0).PAYROLL_LOCK!FieldVal)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	F.Data.DataTable.Close("dtPayRollLockCheck")
	F.Data.DataView.Close("Requests","dvApproved")
	f.Intrinsic.String.Format(v.Local.dDateImport,"MM-DD-YYYY",v.Local.sHold)
'	f.Intrinsic.String.Build("IIF(Status = 'Approved' and DateIn > #{0}#,'UnApprove','')",v.Local.sHold,v.Local.sExpression)
	f.Intrinsic.String.Build("IIF(Status = 'Approved' and not([PAYROLL_LOCK]),'UnApprove','')",v.Local.sHold,v.Local.sExpression)
	f.Data.DataTable.AddExpressionColumn("Requests","UnApprove","String",v.Local.sExpression)
	
	gui.Form.gsRequests.AddGridviewFromDatatable("GVReq","Requests")
	f.Intrinsic.Control.CallSub("Format_gsRequests")
	gui.Form.gsRequests.MainView("GVReq")
	v.Global.bLoad.Set(True)
	f.Intrinsic.Control.CallSub("Deserialize")
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Bind_Requests.End

Program.Sub.cmdProcess_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSQL.Declare
	v.Local.sStatus.Declare
	v.Local.sRet.Declare
	v.Local.bEmailAddressValid.Declare
	v.Local.sRecepients.Declare
	v.Local.sHold.Declare
	v.Local.sProcNote.Declare
	v.Local.iCnt.Declare
	v.Local.sEmail.Declare
	v.Local.sSender.Declare
	v.Local.sBody.Declare
	v.Local.sSubject.Declare
	v.Local.iUser.Declare
	v.Local.iRowIndex.Declare
	
	v.Local.sHourIn.Declare
	v.Local.sMinuteIn.Declare
	v.Local.sHourOut.Declare
	v.Local.sMinuteOut.Declare
	v.Local.sGSSTimeStampIn.Declare
	v.Local.sGSSTimeStampOut.Declare
	v.Local.sECDescr.Declare
	v.Local.sUpdateVacation.Declare
	v.Local.sInsertIntoTimeAttendance.Declare
	v.Local.fHourTaken.Declare
	v.Local.fVacationLeftBeforeProcess.Declare
	v.Local.sEmployee.Declare	
	v.Local.fHold.Declare
	V.Local.sDataView.Declare
	V.Local.sfilter.Declare
	V.Local.sRecepientsFinal.Declare
	V.Local.bApproveSkip.Declare
	
	v.Local..BulkDeclareString(EMPLOYEE,CHARGE_DATE,IN_TS_MIN,OUT_TS_MIN,DATE_IN,TIME_IN,DATE_OUT,TIME_OUT,NAME,DEPT,SHIFT,REC_GROUP,REC_TYPE,EARNINGS_CODE,PAID,EXCUSED,ABSENCE_DESC,CLOCKED_IN,BAL_AS_DATE,DATE_LAST_CHG,TIME_LAST_CHG,LAST_CHG_BY,LAST_CHG_PROG,HOURS_HH,HOURS_MM,ONLY_DOLLARS,DOLLAR_AMT,PAYROLL_LOCK)
	v.Local.fEC.Declare
	v.Local.ACTUAL_DATE.Declare(Date)
	
	F.Intrinsic.Control.BlockEvents
	
	V.Local.sDataView.Set(V.Screen.Request!txtRowIndex.Text)
	
	'Validate Email Address if they want to email
	v.Local.sSender.Set(v.Screen.Request!txtSender.Text)
	f.Intrinsic.Control.If(v.Screen.Request!chkEmail.Value,=,1)
		'Validate Sender email
		f.Global.Messaging.IsAddressValid(v.Local.sSender,v.Local.bEmailAddressValid)
		f.Intrinsic.Control.If(v.Local.bEmailAddressValid.Not)
			f.Intrinsic.UI.Msgbox("Sender Email is not valid. Please set up your email or contact Administrator.","Attention")
			F.Intrinsic.Control.UnBlockEvents
			f.Intrinsic.Control.ExitSub
		f.Intrinsic.Control.EndIf	
		F.Intrinsic.Control.If(V.Screen.Request!txtRecepients.Text.Trim,<>,"")
			f.Intrinsic.String.Split(v.Screen.Request!txtRecepients.Text.Trim,";",v.Local.sRecepients)
			f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sRecepients.UBound,1)
				v.Local.sHold.Set(v.Local.sRecepients(v.Local.iCnt).Trim)
				f.Global.Messaging.IsAddressValid(v.Local.sHold,v.Local.bEmailAddressValid)
				f.Intrinsic.Control.If(v.Local.bEmailAddressValid.Not)
					f.Intrinsic.String.Build("Please verify Extra Recepient Emails.{0}Extra Recepient Emails must be valid emails and seperated by semicolon.{0}No blank email accepted.{0}A semicolon at the start or the end of Extra Recepient Email list is also not accepted.",v.Ambient.NewLine,v.Local.sHold)
					f.Intrinsic.UI.Msgbox(v.Local.sHold,"Attention")
					F.Intrinsic.Control.UnBlockEvents
					f.Intrinsic.Control.ExitSub
				f.Intrinsic.Control.EndIf
			f.Intrinsic.Control.Next(v.Local.iCnt)
			f.Intrinsic.String.Join(v.Local.sRecepients,"@!@",v.Local.sRecepients)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataView.Requests![V.Local.sDataView].RowCount--,1)
		'Set Employee
		v.Local.sEmployee.Set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Employee!FieldValString)
		
		'Double check if it has already approved/Rejected yet
		f.Intrinsic.String.Build("Select Status from GCG_6138_Absence where ReqID = '{0}' and Seq = '{1}'",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ReqID!FieldValString,v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Seq!FieldValString,v.Local.sSQL)
		
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		
		F.Intrinsic.Control.If(V.Local.sRet.Trim,=,"In Process")
			'Approve selected
			f.Intrinsic.Control.If(v.Screen.Request!optApprove.Value,=,True)
				v.Local.sStatus.Set("Approved")
			f.Intrinsic.Control.EndIf
			'Rejected Selected
			f.Intrinsic.Control.If(v.Screen.Request!optReject.Value,=,True)
				v.Local.sStatus.Set("Rejected")
			f.Intrinsic.Control.EndIf
			
			'***************Set Variables to insert into Time_Attendance *********************
			f.Intrinsic.String.Left(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeInChar!FieldValTrim,2,v.Local.sHourIn)
			f.Intrinsic.String.Right(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeInChar!FieldValTrim,2,v.Local.sMinuteIn)
			
			f.Intrinsic.String.Left(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeOutChar!FieldValTrim,2,v.Local.sHourOut)
			f.Intrinsic.String.Right(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeOutChar!FieldValTrim,2,v.Local.sMinuteOut)
			
			'Get GSS Time Stamp for Time in
			f.Intrinsic.Control.CallSub("Calculate_Time_Stamp","dDate",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateIn!FieldValString,"iHour",v.Local.sHourIn,"iMinute",v.Local.sMinuteIn,"iSec",0)
			f.Intrinsic.String.RPad(v.Args.iGSSTimeStamp,"0",12,v.Local.sGSSTimeStampIn)
			'In 2018.1 IN_TS_MIN is numeric
			f.Intrinsic.Control.If(v.Caller.GSSVersion,>,2017.1)
				f.Intrinsic.String.Format(v.Args.iGSSTimeStamp,"00000000.0000",v.Local.sGSSTimeStampIn)
			f.Intrinsic.Control.EndIf
			
			'Get GSS Time Stamp for Time out
			f.Intrinsic.Control.CallSub("Calculate_Time_Stamp","dDate",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateOut!FieldValString,"iHour",v.Local.sHourOut,"iMinute",v.Local.sMinuteOut,"iSec",0)
			f.Intrinsic.String.RPad(v.Args.iGSSTimeStamp,"0",12,v.Local.sGSSTimeStampOut)
			'In 2018.1 OUT_TS_MIN is numeric
			f.Intrinsic.Control.If(v.Caller.GSSVersion,>,2017.1)
				f.Intrinsic.String.Format(v.Args.iGSSTimeStamp,"00000000.0000",v.Local.sGSSTimeStampOut)
			f.Intrinsic.Control.EndIf
			
			v.Local.EMPLOYEE.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Employee!FieldValString)
			
			f.Intrinsic.String.Format(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateIn!FieldValString,"YYYYMMDD",v.Local.sHold)	
			v.local.CHARGE_DATE.set(v.Local.sHold) 
			
			v.local.IN_TS_MIN.set(v.Local.sGSSTimeStampIn) 
			v.local.OUT_TS_MIN.set(v.Local.sGSSTimeStampOut) 
			
			f.Intrinsic.String.Format(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateIn!FieldValString,"YYYYMMDD",v.Local.sHold)
			v.local.DATE_IN.set(v.Local.sHold)
			
			f.Intrinsic.String.RPad(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeInChar!FieldValTrim,"0",6,v.Local.sHold)
			v.local.TIME_IN.set(v.Local.sHold) 
			
			f.Intrinsic.String.Format(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateOut!FieldValString,"YYYYMMDD",v.Local.sHold)
			v.local.DATE_OUT.set(v.Local.sHold) 
			
			f.Intrinsic.String.RPad(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeOutChar!FieldValTrim,"0",6,v.Local.sHold)
			v.local.TIME_OUT.set(v.Local.sHold) 
			
			v.local.NAME.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Name!FieldValTrim) 
			v.local.DEPT.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Dept!FieldValTrim) 
			v.local.SHIFT.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Shift!FieldValTrim) 
			v.local.REC_GROUP.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).BalGrp!FieldValTrim) 
			v.local.REC_TYPE.set("A") 	
			
		'	v.Local.fEC.Set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).EC!FieldValTrim)
		'	f.Intrinsic.Control.If(v.Local.fEC,>,10)
		'		v.Local.EARNINGS_CODE.Set("")
		'	f.Intrinsic.Control.Else
		'		v.local.EARNINGS_CODE.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).EC!FieldValTrim) 	
		'	f.Intrinsic.Control.EndIf
			v.local.EARNINGS_CODE.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).EC!FieldValString) 	
			
			'Process PTO	
			f.Intrinsic.Math.Div(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).HoursMM!FieldValString,60,v.Local.fHourTaken)
			f.Intrinsic.Math.Add(v.Local.fHourTaken,v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).HoursHH!FieldValString,v.Local.fHourTaken)
			v.Local.sECDescr.Set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ECDescr!FieldValTrim)
			'f.Intrinsic.Control.If(v.local.EARNINGS_CODE,=,v.Global.sPTOVACcodes.Trim)
			'	f.Intrinsic.String.Build("Update Employee_Mstr set Vacation_Left = Vacation_Left - {0} where Employee = '{1}'",v.Local.fHourTaken,vv.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Employee!FieldValString,v.Local.sUpdateVacation)
			'f.Intrinsic.Control.Else
			'	v.Local.sUpdateVacation.Set("")
			'f.Intrinsic.Control.EndIf
			
			v.local.PAID.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Paid!FieldValTrim) 	
			F.Intrinsic.Control.If(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Unexcused!Fieldval)
				'Unexcused
				V.Local.EXCUSED.Set("")
			F.Intrinsic.Control.Else
				'Excused
				V.Local.EXCUSED.Set("Y")
			F.Intrinsic.Control.EndIf
			v.local.ABSENCE_DESC.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ABSENCE_DESC!FieldValTrim) 	
			v.local.CLOCKED_IN.set("") 
			v.local.BAL_AS_DATE.set("00000000") 
			
			v.local.DATE_LAST_CHG.set(v.Ambient.Date.FormatYYYYMMDD)
			
			v.Local.sHold.Set(v.Ambient.Now.FormatYYYYMMDDHhNnSs)
			f.Intrinsic.String.RPad(v.Local.sHold.Right6,"0",8,v.Local.sHold)
			v.local.TIME_LAST_CHG.set(v.Local.sHold) 
			
			v.local.LAST_CHG_BY.set(v.Caller.User) 
			v.local.LAST_CHG_PROG.set("AbsCustm") 
			v.local.HOURS_HH.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).HoursHH!FieldValTrim) 
			v.local.HOURS_MM.set(v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).HoursMM!FieldValTrim) 
			v.local.ONLY_DOLLARS.set("") 
			v.local.DOLLAR_AMT.set("0") 
			v.local.ACTUAL_DATE.set(v.Ambient.Date) 
			v.local.PAYROLL_LOCK.Set("0")
			'*********************************************************************************************************
			
			F.Intrinsic.String.Build("select 1 from TIME_ATTENDANCE where EMPLOYEE = '{0}' and CHARGE_DATE = '{1}' and IN_TS_MIN = '{2}'",v.Local.EMPLOYEE,v.local.CHARGE_DATE,v.local.IN_TS_MIN,V.Local.sSQL)
			
			'Build String to insert into Time_Attendance
			f.Intrinsic.String.build("Insert into TIME_ATTENDANCE (EMPLOYEE,CHARGE_DATE,IN_TS_MIN,OUT_TS_MIN,DATE_IN,TIME_IN,DATE_OUT,TIME_OUT,NAME,DEPT,SHIFT,REC_GROUP,REC_TYPE,EARNINGS_CODE,PAID,EXCUSED,ABSENCE_DESC,CLOCKED_IN,BAL_AS_DATE,DATE_LAST_CHG,TIME_LAST_CHG,LAST_CHG_BY,LAST_CHG_PROG,HOURS_HH,HOURS_MM,ONLY_DOLLARS,DOLLAR_AMT,ACTUAL_DATE,PAYROLL_LOCK) values ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}',{23},{24},'{25}',{26},'{27}',{28})",v.Local.EMPLOYEE,v.local.CHARGE_DATE,v.local.IN_TS_MIN,v.local.OUT_TS_MIN,v.local.DATE_IN,v.local.TIME_IN,v.local.DATE_OUT,v.local.TIME_OUT,v.local.NAME.PSQLFriendly,v.local.DEPT,v.local.SHIFT,v.local.REC_GROUP,v.local.REC_TYPE,v.local.EARNINGS_CODE,v.local.PAID,v.local.EXCUSED,v.local.ABSENCE_DESC,v.local.CLOCKED_IN,v.local.BAL_AS_DATE,v.local.DATE_LAST_CHG,v.local.TIME_LAST_CHG,v.local.LAST_CHG_BY,v.local.LAST_CHG_PROG,v.local.HOURS_HH,v.local.HOURS_MM,v.local.ONLY_DOLLARS,v.local.DOLLAR_AMT,v.local.ACTUAL_DATE.PervasiveDate,v.local.PAYROLL_LOCK,v.Local.sInsertIntoTimeAttendance)
			
			'Insert Time Attendance Record
			f.Intrinsic.Control.If(v.Screen.Request!optApprove.Value,=,True)
	'			f.ODBC.Connection!conx.ExecuteAndReturn("Select top 1 OptionValue  from GCG_6138_Maintenance where optionname = 'PTOVAC'",v.Local.sRet)
	'			'Check if he has enough PTO left
	'			f.Intrinsic.Control.If(v.Local.EARNINGS_CODE,=,v.Local.sRet)
	'				v.Local.fHold.Set(v.Screen.Request!txtAfterPendingApproved.Text)
	'				f.Intrinsic.Control.If(v.Local.fHold,<,v.Local.fHourTaken)
	'					f.Intrinsic.String.Build("The Employee {0} does not have enough Vacation Left.",v.DataTable.Requests(v.Local.iRowIndex).Employee!FieldValString,v.Local.sHold)
	'					f.Intrinsic.UI.Msgbox(v.Local.sHold,"Attention")
	'					f.Intrinsic.Control.ExitSub
	'				f.Intrinsic.Control.EndIf		
	'			f.Intrinsic.Control.EndIf
				F.ODBC.Connection!conx.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
				V.Local.bApproveSkip.Set(V.Ambient.ExecuteAndReturnEOF)
				
				'Insert into Time Attendance
				F.Intrinsic.Control.If(V.Local.bApproveSkip.Not)
					F.Intrinsic.UI.Msgbox("Duplicate Record found: skipping insert.")
				F.Intrinsic.Control.Else
					f.ODBC.Connection!conx.Execute(v.Local.sInsertIntoTimeAttendance)
				F.Intrinsic.Control.EndIf
				'f.Intrinsic.Control.If(v.Local.sUpdateVacation,<>,"")
					'f.Intrinsic.Control.If(v.Global.sUseGSSPayroll,<>,"Y")
						''Update Vacation Left
						'f.ODBC.Connection!conx.Execute(v.Local.sUpdateVacation)
					'f.Intrinsic.Control.EndIf
				'f.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				V.Local.bApproveSkip.Set(True)
			f.Intrinsic.Control.EndIf
			
			'JUST TO CLEAR UP SOME MISCONCEPTION: V.Local.bApproveSkip = False IF WE ARE SKIPPING THE UPDATE, V.Local.bApproveSkip = True IF WE ARE COMMITING TO THE UPDATE
			'Update the Status of GCG_6138_Absence
			f.Intrinsic.String.Left(v.Screen.Request!txtNote.Text.Trim,500,v.Local.sProcNote)
			f.Intrinsic.String.Build("Update GCG_6138_Absence set Status = '{2}',ProcByUser = '{3}',ProcByEmp = '{4}',ProcByEmpName = '{5}',ProcNote = '{6}',Email = {7}, DateTimeProcess = Now() where ReqID = '{0}' and Seq = '{1}'",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ReqID!FieldValString,v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Seq!FieldValString,v.Local.sStatus,v.Screen.Form!txtUser.Text,v.Screen.Form!txtEmpID.Text,v.Screen.Form!txtEmpName.Text.PSQLFriendly,v.Local.sProcNote.PSQLFriendly,v.Screen.Request!chkEmail.Value,v.Local.sSQL)
			F.Intrinsic.Control.If(V.Local.bApproveSkip)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
			F.Intrinsic.Control.EndIf
			
			'Email
			f.Intrinsic.Control.If(v.Screen.Request!chkEmail.Value,=,1,and,V.Local.bApproveSkip,=,True)
				f.Intrinsic.String.Build("{0}*!*{1}",v.Local.sSender,"",v.Local.sSender)
				v.Local.sBody.Set(v.Screen.Request!txtBody.Text)
				F.Intrinsic.String.Replace(V.Local.sBody,"#REQID#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ReqID!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#SEQ#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Seq!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#TIMEIN#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeIn!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#DATEIN#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateIn!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#TIMEOUT#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeOut!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#DATEOUT#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateOut!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#HOURS#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Hours!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#PAID#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Paid!FieldValString,V.Local.sBody)
				F.Intrinsic.String.Replace(V.Local.sBody,"#NAME#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Name!FieldValString,V.Local.sBody)
				V.Local.sSubject.Set(v.Screen.Request!txtSubject.Text.Trim)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#REQID#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).ReqID!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#SEQ#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Seq!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#TIMEIN#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeIn!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#DATEIN#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateIn!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#TIMEOUT#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).TimeOut!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#DATEOUT#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).DateOut!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#HOURS#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Hours!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#PAID#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Paid!FieldValString,V.Local.sSubject)
				F.Intrinsic.String.Replace(V.Local.sSubject,"#NAME#",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Name!FieldValString,V.Local.sSubject)
				'Append Employee Email to Recipients
				F.Intrinsic.String.Build("[Employee] = '{0}'",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).Employee!FieldValString,V.Local.sfilter)
				F.Data.DataView.SetFilter("Emails","EmailsDV",V.Local.sfilter)
				F.Intrinsic.Control.If(V.DataView.Emails!EmailsDV.RowCount,>,0)
					F.Intrinsic.Control.If(V.DataView.Emails!EmailsDV(0).Email!FieldVal,<>,"")
						F.Intrinsic.Control.If(V.Local.sRecepients,!=,"")
							F.Intrinsic.String.Build("{0}@!@*!*{1}",V.Local.sRecepients,V.DataView.Emails!EmailsDV(0).Email!FieldVal,V.Local.sRecepientsFinal)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("*!*{0}",V.DataView.Emails!EmailsDV(0).Email!FieldVal,V.Local.sRecepientsFinal)
'							V.Local.sRecepientsFinal.Set(V.DataView.Emails!EmailsDV(0).Email!FieldVal)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
'				'Append BalGrp if it's an employee
'				F.Intrinsic.String.Build("[User_ID] = '{0}'",v.DataView.Requests![V.Local.sDataView](V.Local.iCnt).BalGrp!FieldValString,V.Local.sfilter)
'				F.Data.DataView.SetFilter("Emails","EmailsDV",V.Local.sfilter)
'				F.Intrinsic.Control.If(V.DataView.Emails!EmailsDV.RowCount,>,0)
'					F.Intrinsic.Control.If(V.DataView.Emails!EmailsDV(0).Email!FieldVal,<>,"")
'						F.Intrinsic.Control.If(V.Local.sRecepients,!=,"")
'							F.Intrinsic.String.Build("{0}@!@{1}",V.Local.sRecepients,V.DataView.Emails!EmailsDV(0).Email!FieldVal,V.Local.sRecepientsFinal)
'						F.Intrinsic.Control.Else
'							V.Local.sRecepientsFinal.Set(V.DataView.Emails!EmailsDV(0).Email!FieldVal)
'						F.Intrinsic.Control.EndIf
'					F.Intrinsic.Control.EndIf
'				F.Intrinsic.Control.EndIf
				'Create email to be sent by courier	
				F.Intrinsic.Control.If(V.Local.sRecepientsFinal,<>,"")
					F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.iUser)
					F.Global.Messaging.QueueMessage(V.Caller.CompanyCode,V.Local.iUser,"Absence Request",V.Local.sSubject,V.Local.sSender,V.Local.sRecepientsFinal,v.Local.sBody)
				F.Intrinsic.Control.EndIf
			f.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	F.Intrinsic.Control.UnBlockEvents
	gui.Request..Visible(False)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdProcess_Click.End

Program.Sub.Request_UnLoad.Start
gui.Request..Visible(False)
Program.Sub.Request_UnLoad.End

Program.Sub.Format_gsRequests.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	
	gui.Form.gsRequests.SuspendLayout()
	'General format for the grid
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","AllowSort",True)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","AllowFilter",True)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","OptionsFindAlwaysVisible",True)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","EnableAppearanceOddRow",False)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","OptionsViewShowAutoFilterRow",True)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","AllowColumnResizing",True)
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","OptionsViewColumnAutoWidth",False)	
	Gui.Form.gsRequests.SetGridViewProperty("GVReq","ColumnPanelRowHeight","40")
	
	'VisibleIndex	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,Employee,Name,Shift,Dept,BalGrp,DATE_HIRE,Absence_Desc,EC,ECDescr,Paid2,DateIn,TimeIn,DateOut,TimeOut,Hours,HoursDec,TimeInChar,TimeOutChar,HoursHH,HoursMM,Note,Status,Approve,Reject,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr,UnApprove,ProcNote,ProcByUser,ProcByEmp,ProcByEmpName,Email,DateTimeSubmitted,DateTimeProcess,Unexcused,Excuse_CMD","sProperty","VisibleIndex")
	'InVisible
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Paid,ReqID,Seq,TimeInChar,TimeOutChar,HoursHH,HoursMM,ProcByUser,ProcByEmp,Absence_Desc,DateTimeSubDel,DateTimeStart,Date2010,PAYROLL_LOCK","sProperty","Invisible")
	'HeaderWordWrap
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,Employee,Name,Shift,Dept,BalGrp,DATE_HIRE,Absence_Desc,EC,ECDescr,Paid2,DateIn,TimeIn,DateOut,TimeOut,Hours,HoursDec,TimeInChar,TimeOutChar,HoursHH,HoursMM,Note,Status,Approve,Reject,ProcNote,ProcByUser,ProcByEmp,ProcByEmpName,Email,DateTimeSubmitted,DateTimeProcess,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr,UnApprove,Unexcused,Excuse_CMD","sProperty","HeaderWordWrap")
	'HeaderAllign_Top
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,Employee,Name,Shift,Dept,BalGrp,DATE_HIRE,Absence_Desc,EC,ECDescr,Paid2,DateIn,TimeIn,DateOut,TimeOut,Hours,HoursDec,TimeInChar,TimeOutChar,HoursHH,HoursMM,Note,Status,Approve,Reject,ProcNote,ProcByUser,ProcByEmp,ProcByEmpName,Email,DateTimeSubmitted,DateTimeProcess,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr,UnApprove,Unexcused,Excuse_CMD","sProperty","HeaderAllign_Top")
	'HeaderBold
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,ReqID,Seq,Employee,Name,Shift,Dept,BalGrp,DATE_HIRE,Absence_Desc,DateIn,TimeIn,DateOut,TimeOut,Hours,HoursDec,TimeInChar,TimeOutChar,HoursHH,HoursMM,Note,EC,ECDescr,Paid,Paid2,Status,Approve,Reject,ProcByUser,ProcByEmp,ProcByEmpName,Email,ProcNote,DateTimeSubmitted,DateTimeProcess,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr,UnApprove,Unexcused,Excuse_CMD","sProperty","HeaderFontBold")
	'Header alignment center
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,Employee,Shift,Dept,BalGrp,TimeIn,TimeOut,EC,Email,Paid,Paid2,UnApprove,Unexcused,Excuse_CMD","sProperty","HeaderAllign_Center")
	'Header alignment far
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Hours,HoursDec,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr","sProperty","HeaderAllign_Far")
	'CellHAlignment center
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,Employee,Shift,Dept,BalGrp,TimeIn,TimeOut,EC,Email,Paid,Paid2,UnApprove,Excuse_CMD","sProperty","CellHAlignment_Center")
	'CellHAlignment _ Far
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Hours,HoursDec,PTO,PTOLeftAfterAppr,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr","sProperty","CellHAlignment_Far")
	'Caption
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID@!@Request ID,Employee@!@Empl. ID,ReqID@!@Request ID,BalGrp@!@Bal Group,DATE_HIRE@!@Anniversary Date,DateIn@!@Date In,TimeIn@!@Time In,DateOut@!@Date Out,TimeOut@!@Time Out,ECDescr@!@EC Desc.,ProcByEmpName@!@Processed By,ProcByUser@!@Processed User,ProcNote@!@Processed Note,Note@!@Employee Note,DateTimeSubmitted@!@Submitted at,DateTimeProcess@!@Processed at,Paid2@!@Paid,Hours@!@Hours Taken,HoursDec@!@Hours Taken Dec.,PTO@!@PTO Remaining,Sick_Time@!@Sick Time Remaining,PTOLeftAfterAppr@!@Estimated PTO Left,UnApprove@!@UnApprove,SickLeftAfterAppr@!@Estimated Sick Time Left,Floating_Time@!@Floating Holiday Remaining,FloatingLeftAfterAppr@!@Estimated Floating Holiday Left,Unexcused@!@Unexcused?,Excuse_CMD@!@ ","sProperty","Caption")
	'MinWidth
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Dept,Absence_Desc,TimeInChar,TimeOutChar,HoursHH,HoursMM,ProcByUser,ProcByEmp","sProperty","MinWidth","sWidth","30")
	'Width	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Seq,EC","sProperty","Width","sWidth","35")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Paid2","sProperty","Width","sWidth","40")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","ReqID,Employee,BalGrp,Shift","sProperty","Width","sWidth","55")	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","TimeIn,TimeOut,Hours,Email","sProperty","Width","sWidth","60")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","DateIn,DateOut,ECDescr,Status","sProperty","Width","sWidth","65")	
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","RequestID,ProcByEmpName,ProcNote","sProperty","Width","sWidth","80")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","HoursDec,PTO,PTOLeftAfterAppr,Sick_Time,UnApprove","sProperty","MinWidth","sWidth","80")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","HoursDec,PTO,PTOLeftAfterAppr,Sick_Time,UnApprove","sProperty","MaxWidth","sWidth","80")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","SickLeftAfterAppr","sProperty","MinWidth","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","SickLeftAfterAppr","sProperty","MaxWidth","sWidth","100")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Floating_Time,FloatingLeftAfterAppr","sProperty","MinWidth","sWidth","120")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Floating_Time,FloatingLeftAfterAppr","sProperty","MaxWidth","sWidth","120")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","DateTimeSubmitted","sProperty","Width","sWidth","140")
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","DateTimeProcess","sProperty","Width","sWidth","140")
	'For_RowCell_Click
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","Note,ProcNote,Status,Approve,Reject,UnApprove,Excuse_CMD","sProperty","For_RowCell_Click")
	'DisplayCustomDatetime
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","DATE_HIRE,DateIn,DateOut","sProperty","DisplayCustomDatetime")
	'Decimal_1
	f.Intrinsic.Control.CallSub(FormatBulk,"GS","gsRequests","GV","GVReq","sInputColumns","PTO,PTOLeftAfterAppr,HoursDec,Sick_Time,SickLeftAfterAppr,Floating_Time,FloatingLeftAfterAppr","sProperty","Decimal_1")
	'Set color
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Status","tagStatusApproved","equal","Approved")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Status","tagStatusApproved","forecolor","Blue")
	
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Status","tagStatusRejected","equal","Rejected")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Status","tagStatusRejected","forecolor","Red")
	
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Status","tagStatusInProcess","equal","In Process")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Status","tagStatusInProcess","forecolor","Orange")
	
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Paid2","tagPaid2Yes","equal","Yes")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Paid2","tagPaid2Yes","forecolor","#006400")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Paid2","tagPaid2No","equal","No")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Paid2","tagPaid2No","forecolor","#8B0000")
	
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","PTO","PTONeg","Expression","isnull([PTO],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","PTO","PTOChanged","Expression","[PTO] <> [PTOLeftAfterAppr] and [PTO] >= 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","PTOLeftAfterAppr","PTONeg","Expression","isnull([PTOLeftAfterAppr],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","PTOLeftAfterAppr","PTOChanged","Expression","[PTO] <> [PTOLeftAfterAppr] and [PTOLeftAfterAppr] >= 0")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","PTO","PTONeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","PTO","PTOChanged","backcolor","LightGray")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","PTOLeftAfterAppr","PTONeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","PTOLeftAfterAppr","PTOChanged","backcolor","LightGray")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Sick_Time","SickNeg","Expression","isnull([Sick_Time],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Sick_Time","SickChanged","Expression","[Sick_Time] <> [SickLeftAfterAppr] and [Sick_Time] >= 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","SickLeftAfterAppr","SickNeg","Expression","isnull([SickLeftAfterAppr],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","SickLeftAfterAppr","SickChanged","Expression","[Sick_Time] <> [SickLeftAfterAppr] and [SickLeftAfterAppr] >= 0")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Sick_Time","SickNeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Sick_Time","SickChanged","backcolor","LightGray")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","SickLeftAfterAppr","SickNeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","SickLeftAfterAppr","SickChanged","backcolor","LightGray")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Floating_Time","FloatingNeg","Expression","isnull([Floating_Time],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Floating_Time","FloatingChanged","Expression","[Floating_Time] <> [FloatingLeftAfterAppr] and [Floating_Time] >= 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","FloatingLeftAfterAppr","FloatingNeg","Expression","isnull([FloatingLeftAfterAppr],0) < 0")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","FloatingLeftAfterAppr","FloatingChanged","Expression","[Floating_Time] <> [FloatingLeftAfterAppr] and [FloatingLeftAfterAppr] >= 0")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Floating_Time","FloatingNeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Floating_Time","FloatingChanged","backcolor","LightGray")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","FloatingLeftAfterAppr","FloatingNeg","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","FloatingLeftAfterAppr","FloatingChanged","backcolor","LightGray")
	
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Excuse_CMD","Excuse_CMD","Equal","Excuse")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Excuse_CMD","Excuse_CMD","backcolor","White")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Excuse_CMD","Excuse_CMD","ForeColor","Blue")
	gui.Form.gsRequests.AddStyleFormatCondition("GVReq","Unexcused","Unexcused","Equal",True)
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Unexcused","Unexcused","backcolor","Pink")
	gui.Form.gsRequests.SetStyleFormatConditionProperty("GVReq","Unexcused","Unexcused","ApplyToRow",True)
	
	'Set cellbackcolor
	Gui.Form.gsRequests.SetColumnProperty("GVReq","Note","CellBackColor","#F5F5DC")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","ProcNote","CellBackColor","#FAEBD7")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","RequestID","CellBackColor","#7FFFD4")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","ECDescr","CellBackColor","#DCDCDC")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","EC","CellBackColor","#F0FFF0")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","Paid2","CellBackColor","#E6E6FA")	
	Gui.Form.gsRequests.SetColumnProperty("GVReq","Hours","CellBackColor","#ADD8E6")
	Gui.Form.gsRequests.SetColumnProperty("GVReq","HoursDec","CellBackColor","#ADD8E6")	
	'Summary
	gui.Form.gsRequests.AddSummaryItem("GVReq","HoursDec","SumHoursDec","Sum","","","n")
	
	gui.Form.gsRequests.ResumeLayout()

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Format_gsRequests.End

Program.Sub.gsRequests_RowCellClick.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sBody.Declare
	v.Local.sSubject.Declare
	v.Local.sPaid.Declare
	v.Local.sFilter.Declare
	v.Local.sHold.Declare
	v.Local.sSQL.Declare
	v.Local.sRet.Declare
	v.Local.sEmployee.Declare
	v.Local.sColumn.Declare
	V.Local.fPTOAfter.Declare
	v.Local.dDateIn.Declare
	V.Local.iRet.Declare
	V.Local.fHoursRem.Declare
	V.Local.fHours.Declare
	
	f.Intrinsic.String.LCase(v.Args.Column,v.Local.sColumn)
	
	'point
'	f.Intrinsic.Control.If(v.Local.sColumn,=,"status")
		'moved logic to cmdProcess_Click1
		
	F.Intrinsic.Control.If(V.Local.sColumn,=,"approve")
		'Check Status
		F.Intrinsic.Control.If(V.DataTable.Requests(V.Args.RowIndex).Status!FieldValTrim,=,"In Process")
			'Set Value
			F.Data.DataTable.SetValue("Requests",V.Args.RowIndex,"Approve",V.Args.CellValue.Not,"Reject",False)
		F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.ElseIf(V.Local.sColumn,=,"reject")
		'Check Status
		F.Intrinsic.Control.If(V.DataTable.Requests(V.Args.RowIndex).Status!FieldValTrim,=,"In Process")
			'Set Value
			F.Data.DataTable.SetValue("Requests",V.Args.RowIndex,"Approve",False,"Reject",V.Args.CellValue.Not)
		F.Intrinsic.Control.EndIf
		
	f.Intrinsic.Control.ElseIf(v.Local.sColumn,=,"procnote")
		gui.F_Note.txtCalledFrom.Text("ProcNote")
		gui.F_Note.txtIndex.Text(v.Args.RowIndex)
		f.Intrinsic.String.Build("{0}-{1} - Processed Note",v.DataTable.Requests(v.Args.RowIndex).ReqID!FieldValTrim,v.DataTable.Requests(v.Args.RowIndex).Seq!FieldValTrim,v.Local.sHold)
		gui.F_Note.lblReqID.Caption(v.Local.sHold)
		gui.F_Note.txtF_NoteNote.Text(v.DataTable.Requests(v.Args.RowIndex).ProcNote!FieldValTrim)
		gui.F_Note..Show	
	
	f.Intrinsic.Control.ElseIf(v.Local.sColumn,=,"note")
		gui.F_Note.txtCalledFrom.Text("Note")
		gui.F_Note.txtIndex.Text(v.Args.RowIndex)
		f.Intrinsic.String.Build("{0}-{1} - Employee Note",v.DataTable.Requests(v.Args.RowIndex).ReqID!FieldValTrim,v.DataTable.Requests(v.Args.RowIndex).Seq!FieldValTrim,v.Local.sHold)
		gui.F_Note.lblReqID.Caption(v.Local.sHold)
		gui.F_Note.txtF_NoteNote.Text(v.DataTable.Requests(v.Args.RowIndex).Note!FieldValTrim)
		gui.F_Note..Show	
	
	f.Intrinsic.Control.ElseIf(v.Local.sColumn,=,"unapprove")	
		f.Intrinsic.Control.If(v.DataTable.Requests(v.Args.RowIndex).UnApprove!FieldValTrim,=,"UnApprove",and,v.DataTable.Requests(v.Args.RowIndex).Status!FieldValTrim,=,"Approved")
			gui.F_UnApprove.txtReason.Text("")
			gui.F_UnApprove.txtReqID.Text(v.DataTable.Requests(v.Args.RowIndex).ReqID!FieldValString)
			gui.F_UnApprove.txtSeq.Text(v.DataTable.Requests(v.Args.RowIndex).Seq!FieldValString)
			gui.F_UnApprove.txtDateIn.Text(v.DataTable.Requests(v.Args.RowIndex).DateIn!FieldValString)
			gui.F_UnApprove.txtTimeIn.Text(v.DataTable.Requests(v.Args.RowIndex).TimeInChar!FieldValTrim)
			gui.F_UnApprove.txtTargetEmployee.Text(v.DataTable.Requests(v.Args.RowIndex).Employee!FieldValTrim)
			gui.F_UnApprove..Show	
		f.Intrinsic.Control.EndIf
	F.Intrinsic.Control.ElseIf(V.Local.sColumn.UCase,=,"EXCUSE_CMD")
		F.Intrinsic.UI.Msgbox("This will flag the current record as 'Excused'. Would you like to continue?","Excuse Absence",4,V.Local.iRet)
		F.Intrinsic.Control.If(V.Local.iRet,=,V.Ambient.MsgBoxYes)
			F.Data.DataTable.SetValue("Requests",V.Args.RowIndex,"DateTimeSubDel",0)
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.gsRequests_RowCellClick.End

Program.Sub.cmdLoad_Click.Start
F.Intrinsic.Control.BlockEvents
'F.Intrinsic.Control.CallSub(FindFiscalYearBegin)
f.Intrinsic.Control.CallSub("Serialize")
f.Intrinsic.Control.CallSub("Bind_Requests")
F.Intrinsic.Control.UnBlockEvents
Program.Sub.cmdLoad_Click.End

Program.Sub.chkEmail_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	
	f.Intrinsic.Control.If(v.Screen.Request!chkEmail.Value,=,1)
		gui.Request.txtRecepients.Enabled(True)
		gui.Request.txtSubject.Enabled(True)
		gui.Request.txtBody.Enabled(True)
	f.Intrinsic.Control.Else
		gui.Request.txtRecepients.Enabled(False)
		gui.Request.txtSubject.Enabled(False)
		gui.Request.txtBody.Enabled(False)
	f.Intrinsic.Control.EndIf	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry

Program.Sub.chkEmail_Click.End

Program.Sub.optApprove_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSubject.Declare
	v.Local.sBody.Declare
	
	f.Intrinsic.String.Build("Request {0}-{1} Approved",v.Screen.Request!lblReqID.Text.Trim,v.Screen.Request!lblSeq.Text.Trim,v.Local.sSubject)
	gui.Request.txtSubject.Text(v.Local.sSubject)
	f.Intrinsic.String.Build("{0}{1}{2}",v.Screen.Request!txtCoreBody.Text.Trim,v.Ambient.NewLine,v.Global.sDefaultApprovedText,v.Local.sBody)
	gui.Request.txtBody.Text(v.Local.sBody)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.optApprove_Click.End

Program.Sub.optReject_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sSubject.Declare
	v.Local.sBody.Declare
	
	f.Intrinsic.String.Build("Request {0}-{1} Rejected",v.Screen.Request!lblReqID.Text.Trim,v.Screen.Request!lblSeq.Text.Trim,v.Local.sSubject)
	gui.Request.txtSubject.Text(v.Local.sSubject)
	f.Intrinsic.String.Build("{0}{1}{2}",v.Screen.Request!txtCoreBody.Text.Trim,v.Ambient.NewLine,v.Global.sDefaultRejectedText,v.Local.sBody)
	gui.Request.txtBody.Text(v.Local.sBody)
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.optReject_Click.End

Program.Sub.cmdBrowseEmail_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sSQL.Declare
	v.Local.sRet.Declare
	
	F.Intrinsic.UI.SetBrowserHotTypeAhead(true)
	F.Intrinsic.String.Build("select rtrim(GS_USER), rtrim(FIRST_NAME) + if(rtrim(FIRST_NAME) <> '', ' ', '') + rtrim(MIDDLE_NAME) + if(rtrim(MIDDLE_NAME) <> '', ' ', '') + rtrim(LAST_NAME), rtrim(EMAIL) from USER_INFORMATION where COMPANY_SPECIFIC = 0 or (COMPANY_SPECIFIC = 1 and COMPANY = '{0}') order by GS_USER",V.Caller.CompanyCode,V.Local.sSQL)
	F.ODBC.Connection!common.OpenCommonConnection
	F.Intrinsic.UI.Browser("User Emails","common",V.Local.sSQL,"User*!*Name*!*Email","200*!*500*!*500",Variable.Local.sRet)
	F.ODBC.Connection!common.Close
	
	'Check if you choose any record from the result
	F.Intrinsic.Control.If(Variable.Local.sRet.IsNotCancel)
		F.Intrinsic.String.Split(Variable.Local.sRet,"*!*",Variable.Local.sRet)
		gui.Request.txtEmail.Text(v.Local.sRet(2).Trim)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdBrowseEmail_Click.End

Program.Sub.cmdAddRecepient_Click.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sRecepients.Declare
	
	f.Intrinsic.Control.If(v.Screen.Request!txtRecepients.Text.Trim,=,"")
		gui.Request.txtRecepients.Text(v.Screen.Request!txtEmail.Text.Trim)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("{0};{1}",v.Screen.Request!txtRecepients.Text.Trim,v.Screen.Request!txtEmail.Text.Trim,v.Local.sRecepients)
		gui.Request.txtRecepients.Text(v.Local.sRecepients)
	f.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Current Subroutine: {2}{1}Subroutine Called From: {3}{1}Error Occurred {4}{1}Error description: {5}{1}GAB Version: {6}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,v.Ambient.SubroutineCalledFrom,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAddRecepient_Click.End

Program.Sub.F_Note_UnLoad.Start
gui.F_Note..Visible(False)
Program.Sub.F_Note_UnLoad.End

Program.Sub.cmdNoteOK_Click.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sReqID.Declare
	v.Local.sSQL.Declare
	v.Local.sNote.Declare
	
	v.Local.sNote.Set(v.Screen.F_Note!txtF_NoteNote.Text)
	f.Intrinsic.String.Split(v.Screen.F_Note!lblReqID.Text,"-",v.Local.sReqID)
	f.Intrinsic.String.Build("Update GCG_6138_Absence set ProcNote = '{2}' where ReqID = '{0}' and Seq = '{1}'",v.Local.sReqID(0),v.Local.sReqID(1),v.Local.sNote.PSQLFriendly,v.Local.sSQL)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdNoteOK_Click.End

Program.Sub.Deserialize.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.sSerialize.Declare	
	
	'gvAllShip
	F.Global.Registry.ReadValue(V.Caller.User,V.Caller.CompanyCode,"GVReq",6138,1001,6,"",V.Local.sSerialize)
	F.Intrinsic.Control.If(V.Local.sSerialize.Trim,<>,"")
	
		Gui.Form.gsRequests.Deserialize(V.Local.sSerialize)
	F.Intrinsic.Control.EndIf	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Deserialize.End

Program.Sub.Serialize.Start
'BN, 09 Feb 2019, add Serialize/Deserialize feature
f.Intrinsic.Control.Try
	V.Local.sError.Declare	
	V.Local.sSerialize.Declare
	v.Local.sSQL.Declare	
	v.Local.sUserID.Declare
	
	F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.sUserID)
	
	'Delete old registry records
	F.ODBC.Connection!common.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)		
	f.Intrinsic.String.Build("Delete From Gs_Registry Where User_ID = '{0}' and Company = '{1}' and Reg_ID = 6138 and Seq = '1001';",v.Local.sUserID,v.Caller.CompanyCode,v.Local.sSQL)
	F.ODBC.Connection!common.Execute(v.Local.sSQL)
	F.ODBC.Connection!common.Close
	'GVMain
	Gui.Form.gsRequests.Serialize("GVReq",V.Local.sSerialize)
	F.Global.Registry.AddValue(V.Caller.User,V.Caller.CompanyCode,"GVReq",6138,1001,False,"Serialize",False,0,-999.0,1/1/1980,12:00:00 AM,V.Local.sSerialize)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Serialize.End

Program.Sub.FormatBulk.Start
f.Intrinsic.Control.Try
	V.Local..BulkDeclareString(sError,sColumns,sHold)
	v.Local..BulkDeclareLong(iCnt)

	f.Intrinsic.String.Split(v.Args.sInputColumns,",",v.Local.sColumns)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sColumns.UBound,1)
		F.Intrinsic.Control.SelectCase(v.Args.sProperty)
			F.Intrinsic.Control.Case("MinWidth")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"MinWidth",v.Args.sWidth)
			F.Intrinsic.Control.Case("MaxWidth")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"MaxWidth",v.Args.sWidth)
			F.Intrinsic.Control.Case("Width")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Width",v.Args.sWidth)
			F.Intrinsic.Control.Case("Invisible")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"Visible",False)
			F.Intrinsic.Control.Case("VisibleIndex")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"VisibleIndex",v.Local.iCnt)
			F.Intrinsic.Control.Case("Caption")
				f.Intrinsic.String.Split(v.Local.sColumns(v.Local.iCnt),"@!@",v.Local.sHold)
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sHold(0),"Caption",v.Local.sHold(1))
			F.Intrinsic.Control.Case("HeaderAllign_Far")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderHAlignment","Far")
			F.Intrinsic.Control.Case("HeaderAllign_Center")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderHAlignment","Center")
			F.Intrinsic.Control.Case("HeaderAllign_Top")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderVAlignment","Top")
			F.Intrinsic.Control.Case("HeaderFontBold")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderFontBold",True)
			F.Intrinsic.Control.Case("HeaderWordWrap")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"HeaderWordWrap","Wrap")
			F.Intrinsic.Control.Case("CellHAlignment_Center")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"CellHAlignment","Center")
			F.Intrinsic.Control.Case("CellHAlignment_Far")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"CellHAlignment","Far")
			F.Intrinsic.Control.Case("Decimal_1")	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomNumeric","###,###,###,##0.00")
			f.Intrinsic.Control.Case("For_CellValue_Changed")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"AllowEdit",True)	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"ReadOnly",False)
			f.Intrinsic.Control.Case("For_RowCell_Click")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"AllowEdit",False)	
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"ReadOnly",True)
			f.Intrinsic.Control.Case("DisplayCustomDatetime")
				gui.Form.[v.Args.GS].SetColumnProperty(v.Args.GV,v.Local.sColumns(v.Local.iCnt),"DisplayCustomDatetime","d")	
			F.Intrinsic.Control.EndSelect		
	f.Intrinsic.Control.Next(v.Local.iCnt)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry

Program.Sub.FormatBulk.End

Program.Sub.Calculate_Time_Stamp.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.dDate.Declare
	
	v.Local.iGSSJulianDate.Declare	
	v.Local.iDate.Declare
	v.Local.iGssTimeStamp.Declare	
	v.Local.iHour.Declare
	v.Local.iMinute.Declare
	v.Local.iSec.Declare
	v.Local.iHold.Declare		

	v.Local.dDate.Set(v.Args.dDate)
	v.Local.iHour.Set(v.Args.iHour)
	v.Local.iMinute.Set(v.Args.iMinute)
	v.Local.iSec.Set(v.Args.iSec)
	
	F.Intrinsic.Date.DateDiff ("d","1899-12-30",v.Local.dDate,v.Local.iDate)
	f.Intrinsic.Math.Sub(v.Local.iDate,24838,v.Local.iGSSJulianDate)
	
	'GSS Time Stamp = iGSSJulianDate * 1440 + (Hours*60) + Minute + MOD(Sec,60)
	f.Intrinsic.Math.Mult(v.Local.iGSSJulianDate,1440,v.Local.iGssTimeStamp)
	f.Intrinsic.Math.Mult(v.Local.iHour,60,v.Local.iHold)
	f.Intrinsic.Math.Add(v.Local.iGssTimeStamp,v.Local.iHold,v.Local.iGssTimeStamp)
	f.Intrinsic.Math.Add(v.Local.iGssTimeStamp,v.Local.iMinute,v.Local.iGssTimeStamp)
	f.Intrinsic.Math.Mod(v.Local.iSec,60,v.Local.iHold)
	f.Intrinsic.Math.Add(v.Local.iGssTimeStamp,v.Local.iHold,v.Local.iGssTimeStamp)
	
	f.Intrinsic.Variable.AddRV("iGSSTimeStamp",v.Local.iGssTimeStamp)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Calculate_Time_Stamp.End

Program.Sub.cmdExport_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	
	V.Local.sFileExport.Declare
	V.Local.bExcel.Declare
	V.Local.bFileLocked.Declare
	V.Local.sMsg.Declare

	F.Automation.MSExcel.CheckPresence(V.Local.bExcel)

	F.Intrinsic.Control.If(V.Local.bExcel)
		F.Intrinsic.String.Build("{0}\AbsenceReq_{1}.xlsx",V.Caller.LocalGssTempDir,v.Ambient.Now.FormatMMDDYYYYHhNnSs,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
		F.Intrinsic.Control.Else
			Gui.Form.gsRequests.Export(V.Local.sFileExport,"xlsx")
			F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		F.Intrinsic.String.Build("{0}\AbsenceReq{1}.csv",V.Caller.LocalGssTempDir,v.Ambient.Now.FormatMMDDYYYYHhNnSs,V.Local.sFileExport)
		F.Intrinsic.File.IsFileLocked(V.Local.sFileExport,V.Local.bFileLocked)
		F.Intrinsic.Control.If(V.Local.bFileLocked)
			F.Intrinsic.String.Build("File is already open. Please close and export again.{0}File: {1}",V.Ambient.NewLine,V.Local.sFileExport,V.Local.sMsg)
			F.Intrinsic.UI.Msgbox(V.Local.sMsg,"File In Use")
		F.Intrinsic.Control.Else
			Gui.Form.gsRequests.Export(V.Local.sFileExport,"csv")
		F.Intrinsic.Control.EndIf
		F.Intrinsic.Task.ShellExec(0,"",V.Local.sFileExport,"","",1)
	F.Intrinsic.Control.EndIf		
	
	F.Intrinsic.Control.Catch
		F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
		F.Intrinsic.UI.Msgbox(V.Local.sError)
		F.Intrinsic.Control.CallSub("Unload")
	F.Intrinsic.Control.EndTry
Program.Sub.cmdExport_Click.End

Program.Sub.F_UnApprove_UnLoad.Start
gui.F_UnApprove..Visible(False)
Program.Sub.F_UnApprove_UnLoad.End

Program.Sub.cmdCancel_Click.Start
gui.F_UnApprove..Visible(False)
Program.Sub.cmdCancel_Click.End

Program.Sub.cmdUnApprove_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.dDateIn.Declare
	v.Local.sSQL.Declare
	V.Local.sRet.Declare
	v.Local.sFilter.Declare
	v.Local.iUser.Declare
	v.Local.sBody.Declare
	v.Local.sProcNote.Declare

	f.Intrinsic.UI.InvokeWaitDialog("Deleting Time Attendance record...")
	v.Local.dDateIn.Set(v.Screen.F_UnApprove!txtDateIn.Text)
	
	'Delete Absence Record from Time_Attendance
	f.Intrinsic.String.Build("Delete from Time_Attendance where Employee = '{0}' and Date_In = '{1}' and Time_In = '{2}00'",v.Screen.F_UnApprove!txtTargetEmployee.Text,v.Local.dDateIn.formatYYYYMMDD,v.Screen.F_UnApprove!txtTimeIn.Text,v.Local.sSQL)
	f.ODBC.Connection!Conx.Execute(v.Local.sSQL)			
	
	'Set Status back to UnApproved
	f.Intrinsic.UI.ChangeWaitStatus("Setting Status back to UnApproved")
	v.Local.sProcNote.Set(v.Screen.F_UnApprove!txtReason.Text.Trim)
	
	f.Intrinsic.String.Build("Update GCG_6138_Absence set Status = 'UnApproved', ProcByUser = '{2}',ProcByEmp = '{3}',ProcByEmpName = '{4}',DateTimeProcess = Now(),ProcNote = '{5}'  where ReqID = '{0}' and Seq = '{1}'",v.Screen.F_UnApprove!txtReqID.Text,v.Screen.F_UnApprove!txtSeq.Text,v.Caller.User,v.Screen.Form!txtEmpID.Text.Trim,v.Screen.Form!txtEmpName.Text.PSQLFriendly,v.Local.sProcNote.PSQLFriendly,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Send Email
	f.Intrinsic.Control.If(v.Screen.F_UnApprove!chkEmail.Value,=,1)		
		f.Intrinsic.String.Build("Employee = '{0}'",v.Screen.F_UnApprove!txtTargetEmployee.Text,v.Local.sFilter)
		f.Data.DataView.SetFilter("Emails","EmailsDV",v.Local.sFilter)
		f.Intrinsic.Control.If(v.DataView.Emails!EmailsDV.RowCount,>,0)
			f.Intrinsic.Control.If(v.screen.Form!txtEmail.Text.Trim,<>,"")
				f.Intrinsic.UI.ChangeWaitStatus("Sending Email...")
				f.Intrinsic.String.Build("Request ID: {1}-{2} has been unapproved.{0}Reason: {3}",v.Ambient.NewLine,v.Screen.F_UnApprove!txtReqID.Text,v.Screen.F_UnApprove!txtSeq.Text,v.Screen.F_UnApprove!txtReason.Text,v.Local.sBody)
				'Send Email
				F.Global.Security.GetUserID(v.Caller.User,v.Caller.CompanyCode,v.Local.iUser)
				F.Global.Messaging.QueueMessage(V.Caller.CompanyCode,V.Local.iUser,"Absence UnApproved","Absence UnApproved",v.screen.Form!txtEmail.Text.Trim,v.DataView.Emails!EmailsDV(0).Email!FieldValString,v.Local.sBody)
				f.Intrinsic.String.Build("Update GCG_6138_Absence set Email = 1  where ReqID = '{0}' and Seq = '{1}'",v.Screen.F_UnApprove!txtReqID.Text,v.Screen.F_UnApprove!txtSeq.Text,v.Local.sSQL)
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)				
				f.Intrinsic.UI.CloseWaitDialog
			f.Intrinsic.Control.EndIf			
		f.Intrinsic.Control.EndIf		
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.UI.CloseWaitDialog
	gui.F_UnApprove..Visible(False)
	
	'Refresh
f.Intrinsic.Control.CallSub("cmdLoad_click")
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdUnApprove_Click.End

Program.Sub.cmdSaveOptEmail_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sSQL.Declare
	V.Local.sRet.Declare
	
	f.Intrinsic.UI.InvokeWaitDialog("Saving receive email option...")
	f.Intrinsic.String.Build("Select * from GCG_6138_Maintenance where OptionName = '{0}'",v.Global.sOptReceiveEmailOptionName,v.Local.sSQL)
	f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.Intrinsic.Control.If(v.Local.sRet.Trim,=,"")
		f.Intrinsic.String.Build("Insert into GCG_6138_Maintenance (OptionName,OptionValue) values ('{0}','{1}')",v.Global.sOptReceiveEmailOptionName,v.Screen.Form!chkReceiveEmail.Value,v.Local.sSQL)
	f.Intrinsic.Control.Else
		f.Intrinsic.String.Build("Update GCG_6138_Maintenance set OptionValue = '{1}' where  OptionName = '{0}'",v.Global.sOptReceiveEmailOptionName,v.Screen.Form!chkReceiveEmail.Value,v.Local.sSQL)
	f.Intrinsic.Control.EndIf
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	f.Intrinsic.UI.CloseWaitDialog
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSaveOptEmail_Click.End

Program.Sub.cmdTA_Click.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sFile.Declare
	v.Local.iPIDReturn.Declare

	'Call an Async process
	f.Intrinsic.String.Build("{0}\GCG_6138_TA_Output.gas",v.Caller.GasDir,v.Local.sFile)
	function.Global.General.CallAsyncGAS(v.Local.sFile,"",v.Local.iPIDReturn)

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdTA_Click.End

Program.Sub.FindFiscalYearBegin.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	V.Local.sSQL.Declare
	
	V.Global.iFiscalYear.Set(V.Screen.Form!ddlYear.Text.Long)
	F.Intrinsic.String.Build("select BEG_DATE from V_GL_CALENDAR where START_YEAR = {0} and PERIOD = '01';",V.Global.iFiscalYear,V.Local.sSQL)
	F.ODBC.Connection!conFiscalYear.OpenCompanyConnection
	F.ODBC.Connection!conFiscalYear.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		F.Intrinsic.Date.DateSerial(V.Global.iFiscalYear,1,1,V.Global.dFiscalStart)
	F.Intrinsic.Control.Else
		V.Global.dFiscalStart.Set(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	F.Intrinsic.String.Build("select top 1 END_DATE from V_GL_CALENDAR where START_YEAR = {0} order by PERIOD desc;",V.Global.iFiscalYear,V.Local.sSQL)
	F.ODBC.Connection!conFiscalYear.ExecuteAndReturn(V.Local.sSQL,V.Local.sSQL)
	F.ODBC.Connection!conFiscalYear.Close
	F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
		F.Intrinsic.Date.DateSerial(V.Global.iFiscalYear,12,31,V.Global.dFiscalEnd)
	F.Intrinsic.Control.Else
		V.Global.dFiscalEnd.Set(V.Local.sSQL)
	F.Intrinsic.Control.EndIf
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.FindFiscalYearBegin.End

Program.Sub.PTORP.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iEmp.Declare
	V.Local.iReq.Declare
	V.Local.sFilter.Declare
	V.Local.fNew.Declare
	
	F.Data.DataView.Create("Requests","dvPTORP")
	F.Data.DataView.ToDataTableDistinct("Requests","dvPTORP","dtEmployees","EMPLOYEE",False)
	F.Data.DataTable.AddColumn("dtEmployees","PTO_Left",Float)
	F.Data.DataTable.AddColumn("dtEmployees","Sick_Left",Float)
	F.Data.DataTable.AddColumn("dtEmployees","Floating_Left",Float)
	F.Data.DataTable.AddColumn("Requests","PTOLeftAfterAppr",Float)
	F.Data.DataTable.AddColumn("Requests","SickLeftAfterAppr",Float)
	F.Data.DataTable.AddColumn("Requests","FloatingLeftAfterAppr",Float)
	F.Intrinsic.Control.For(V.Local.iEmp,0,V.DataTable.dtEmployees.RowCount--,1)
		F.Intrinsic.String.Build("[EMPLOYEE] = '{0}' and [STATUS] <> 'In Process'",V.DataTable.dtEmployees(V.Local.iEmp).EMPLOYEE!FieldVal,V.Local.sFilter)
		F.Data.DataView.SetFilter("Requests","dvPTORP",V.Local.sFilter)
		F.Data.DataView.SetValue("Requests","dvPTORP",-1,"PTO",V.Ambient.DBNull,"Sick_Time",V.Ambient.DBNull,"Floating_Time",V.Ambient.DBNull)
		
		F.Intrinsic.String.Build("[EMPLOYEE] = '{0}' and [STATUS] = 'In Process'",V.DataTable.dtEmployees(V.Local.iEmp).EMPLOYEE!FieldVal,V.Local.sFilter)
		F.Data.DataView.SetFilter("Requests","dvPTORP",V.Local.sFilter)
		F.Data.DataView.SetSort("Requests","dvPTORP","RequestID asc")
		F.Intrinsic.Control.If(V.DataView.Requests!dvPTORP.RowCount,>,0)
			F.Data.DataTable.SetValue("dtEmployees",V.Local.iEmp,"PTO_Left",V.DataView.Requests!dvPTORP(0).PTO!FieldVal,"Sick_Left",V.DataView.Requests!dvPTORP(0).Sick_Time!FieldVal,"Floating_Left",V.DataView.Requests!dvPTORP(0).Floating_Time!FieldVal)
			
			F.Intrinsic.Control.For(V.Local.iReq,0,V.DataView.Requests!dvPTORP.RowCount--,1)
				F.Intrinsic.Control.SelectCase(V.DataView.Requests!dvPTORP(V.Local.iReq).EC!FieldValTrim)
					F.Intrinsic.Control.Case(V.Global.sPTOVACcodes)
						'PTO EC
						F.Intrinsic.Math.Div(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSMM!FieldVal,60,V.Local.fNew)
						F.Intrinsic.Math.Add(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSHH!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Intrinsic.Math.Sub(V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Data.DataView.SetValue("Requests","dvPTORP",V.Local.iReq,"PTO",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"Sick_Time",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"Floating_Time",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal,"PTOLeftAfterAppr",V.Local.fNew,"SickLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"FloatingLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal)
						F.Data.DataTable.SetValue("dtEmployees",V.Local.iEmp,"PTO_Left",V.Local.fNew)
					F.Intrinsic.Control.Case(V.Global.sSickVACcodes)
						'Sick EC
						F.Intrinsic.Math.Div(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSMM!FieldVal,60,V.Local.fNew)
						F.Intrinsic.Math.Add(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSHH!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Intrinsic.Math.Sub(V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Data.DataView.SetValue("Requests","dvPTORP",V.Local.iReq,"PTO",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"Sick_Time",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"Floating_Time",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal,"PTOLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"SickLeftAfterAppr",V.Local.fNew,"FloatingLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal)
						F.Data.DataTable.SetValue("dtEmployees",V.Local.iEmp,"Sick_Left",V.Local.fNew)
					F.Intrinsic.Control.Case(V.Global.sFloatingVACcodes)
						'Floating EC
						F.Intrinsic.Math.Div(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSMM!FieldVal,60,V.Local.fNew)
						F.Intrinsic.Math.Add(V.DataView.Requests!dvPTORP(V.Local.iReq).HOURSHH!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Intrinsic.Math.Sub(V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal,V.Local.fNew,V.Local.fNew)
						F.Data.DataView.SetValue("Requests","dvPTORP",V.Local.iReq,"PTO",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"Sick_Time",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"Floating_Time",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal,"PTOLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"SickLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"FloatingLeftAfterAppr",V.Local.fNew)
						F.Data.DataTable.SetValue("dtEmployees",V.Local.iEmp,"Floating_Left",V.Local.fNew)
					F.Intrinsic.Control.CaseElse
						'Other EC
						F.Data.DataView.SetValue("Requests","dvPTORP",V.Local.iReq,"PTO",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"Sick_Time",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"Floating_Time",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal,"PTOLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).PTO_Left!FieldVal,"SickLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Sick_Left!FieldVal,"FloatingLeftAfterAppr",V.DataTable.dtEmployees(V.Local.iEmp).Floating_Left!FieldVal)
				F.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.Next(V.Local.iReq)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iEmp)
	
	F.Data.DataTable.Close("dtEmployees")
	F.Data.DataView.Close("Requests","dvPTORP")
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.PTORP.End

Program.Sub.cmdProcess_Click1.Start
f.Intrinsic.Control.Try
	V.Local.sError.Declare
	V.Local.iCnt.Declare
	V.Local.sEmployee.Declare
	V.Local.fHoursRem.Declare
	V.Local.sFilter.Declare
	V.Local.fHoursTot.Declare
	V.Local.fMinTot.Declare
	V.Local.sMsg.Declare
	V.Local.sSubject.Declare
	V.Local.sBody.Declare
	V.Local.sRet.Declare
	
	F.Intrinsic.Control.BlockEvents
	
	'Get Info on what is approved and rejected
	F.Data.DataView.Create("Requests","dvApprove")
	F.Data.DataView.SetFilter("Requests","dvApprove","[Approve]")
	F.Data.DataView.Create("Requests","dvReject")
	F.Data.DataView.SetFilter("Requests","dvReject","[Reject]")
	
	F.Intrinsic.Control.If(V.DataView.Requests!dvApprove.RowCount,=,0,and,V.DataView.Requests!dvReject.RowCount,=,0)
		F.Intrinsic.UI.Msgbox("No requests approved or rejected.","Cancelling Process")
		F.Data.DataView.Close("Requests","dvApprove")
		F.Data.DataView.Close("Requests","dvReject")
		F.Intrinsic.Control.UnBlockEvents
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
	
	'Display approval side
	F.Intrinsic.Control.If(V.DataView.Requests!dvApprove.RowCount,>,0)
		gui.Request.txtRowIndex.Text("dvApprove")
		F.Intrinsic.Control.If(V.DataView.Requests!dvApprove.RowCount,=,1)
			gui.Request.lblReqID.Caption(V.DataView.Requests!dvApprove(0).ReqID!FieldValString)
			gui.Request.lblSeq.Caption(V.DataView.Requests!dvApprove(0).Seq!FieldValString)
			'Set employee info
			gui.Request.lblEmpID.Caption(V.DataView.Requests!dvApprove(0).Employee!FieldValTrim)
			gui.Request.lblName.Caption(V.DataView.Requests!dvApprove(0).Name!FieldValTrim)
			gui.Request.lblDept.Caption(V.DataView.Requests!dvApprove(0).Dept!FieldValString)
			gui.Request.lblShift.Caption(V.DataView.Requests!dvApprove(0).Shift!FieldValTrim)
			v.Local.sEmployee.Set(V.DataView.Requests!dvApprove(0).Employee!FieldValString)
			V.Local.fHoursRem.Set(V.Dictionary.VacDict![V.Local.sEmployee])
			f.Intrinsic.String.Format(V.Local.fHoursRem,"0.00",v.Local.sRet)
			gui.Request.txtRemainingHours.Text(v.Local.sRet)
		F.Intrinsic.Control.Else
			gui.Request.lblReqID.Caption("Multiple")
			gui.Request.lblSeq.Caption("")
			'Set employee info
			gui.Request.lblEmpID.Caption("")
			gui.Request.lblName.Caption("")
			gui.Request.lblDept.Caption("")
			gui.Request.lblShift.Caption("")
			gui.Request.txtRemainingHours.Text("")
			gui.Request.txtAfterPendingApproved.Text("")
			gui.Request.txtRecepients.Text("")
		F.Intrinsic.Control.EndIf
		'Check Vacation time remaining for all employees
		F.Data.DataView.ToDataTableDistinct("Requests","dvApprove","dtEmployeeCheck","Employee*!*Name")
		F.Intrinsic.Control.For(V.Local.iCnt,0,V.DataTable.dtEmployeeCheck.RowCount--,1)
			v.Local.sEmployee.Set(v.DataTable.dtEmployeeCheck(0).Employee!FieldValString)
			'Check Employee Vacation Time
			V.Local.fHoursRem.Set(V.Dictionary.VacDict![V.Local.sEmployee])
			F.Intrinsic.String.Build("[Employee] = '{0}' and [Approve] and [EC] = '{1}' and [Paid] = 'Y'",V.Local.sEmployee,V.Global.sPTOVACcodes,V.Local.sFilter)
			F.Data.DataTable.Compute("Requests","Sum(HOURSHH)",V.Local.sFilter,V.Local.fHoursTot)
			F.Data.DataTable.Compute("Requests","Sum(HOURSMM)",V.Local.sFilter,V.Local.fMinTot)
			F.Intrinsic.Math.Div(V.Local.fMinTot,60,V.Local.fMinTot)
			F.Intrinsic.Math.Add(V.Local.fHoursTot,V.Local.fMinTot,V.Local.fHoursTot)
			F.Intrinsic.String.Format(V.Local.fHoursTot,"0.00",V.Local.fHoursTot)
			F.Intrinsic.Control.If(V.Local.fHoursTot,>,V.Local.fHoursRem)
				F.Intrinsic.String.Build("{0} does not have enough Vacation Hours remaining to process these requests. (Hours Left: {1}, Hours Requested: {2}) No work done.",v.DataTable.dtEmployeeCheck(0).Name!FieldValString,V.Local.fHoursRem,V.Local.fHoursTot,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg)
				F.Data.DataView.Close("Requests","dvApprove")
				F.Data.DataView.Close("Requests","dvReject")
				F.Data.DataTable.Close("dtEmployeeCheck")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check Employee Sick Time
			V.Local.fHoursRem.Set(V.Dictionary.SickDict![V.Local.sEmployee])
			F.Intrinsic.String.Build("[Employee] = '{0}' and [Approve] and [EC] = '{1}' and [Paid] = 'Y'",V.Local.sEmployee,V.Global.sSickVACcodes,V.Local.sFilter)
			F.Data.DataTable.Compute("Requests","Sum(HOURSHH)",V.Local.sFilter,V.Local.fHoursTot)
			F.Data.DataTable.Compute("Requests","Sum(HOURSMM)",V.Local.sFilter,V.Local.fMinTot)
			F.Intrinsic.Math.Div(V.Local.fMinTot,60,V.Local.fMinTot)
			F.Intrinsic.Math.Add(V.Local.fHoursTot,V.Local.fMinTot,V.Local.fHoursTot)
			F.Intrinsic.String.Format(V.Local.fHoursTot,"0.00",V.Local.fHoursTot)
			F.Intrinsic.Control.If(V.Local.fHoursTot,>,V.Local.fHoursRem)
				F.Intrinsic.String.Build("{0} does not have enough Sick Hours remaining to process these requests. (Hours Left: {1}, Hours Requested: {2}) No work done.",v.DataTable.dtEmployeeCheck(0).Name!FieldValString,V.Local.fHoursRem,V.Local.fHoursTot,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg)
				F.Data.DataView.Close("Requests","dvApprove")
				F.Data.DataView.Close("Requests","dvReject")
				F.Data.DataTable.Close("dtEmployeeCheck")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
			'Check Employee Floating Holiday Time
			V.Local.fHoursRem.Set(V.Dictionary.FloatingDict![V.Local.sEmployee])
			F.Intrinsic.String.Build("[Employee] = '{0}' and [Approve] and [EC] = '{1}' and [Paid] = 'Y'",V.Local.sEmployee,V.Global.sFloatingVACcodes,V.Local.sFilter)
			F.Data.DataTable.Compute("Requests","Sum(HOURSHH)",V.Local.sFilter,V.Local.fHoursTot)
			F.Data.DataTable.Compute("Requests","Sum(HOURSMM)",V.Local.sFilter,V.Local.fMinTot)
			F.Intrinsic.Math.Div(V.Local.fMinTot,60,V.Local.fMinTot)
			F.Intrinsic.Math.Add(V.Local.fHoursTot,V.Local.fMinTot,V.Local.fHoursTot)
			F.Intrinsic.String.Format(V.Local.fHoursTot,"0.00",V.Local.fHoursTot)
			F.Intrinsic.Control.If(V.Local.fHoursTot,>,V.Local.fHoursRem)
				F.Intrinsic.String.Build("{0} does not have enough Floating Holiday Hours remaining to process these requests. (Hours Left: {1}, Hours Requested: {2}) No work done.",v.DataTable.dtEmployeeCheck(0).Name!FieldValString,V.Local.fHoursRem,V.Local.fHoursTot,V.Local.sMsg)
				F.Intrinsic.UI.Msgbox(V.Local.sMsg)
				F.Data.DataView.Close("Requests","dvApprove")
				F.Data.DataView.Close("Requests","dvReject")
				F.Data.DataTable.Close("dtEmployeeCheck")
				F.Intrinsic.Control.UnBlockEvents
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Data.DataTable.Close("dtEmployeeCheck")
		'Build Subject
		f.Intrinsic.String.Build("Request {0}-{1} Approved","#REQID#","#SEQ#",v.Local.sSubject)
		gui.Request.txtSubject.Text(v.Local.sSubject)
		'Build Request Info
		f.Intrinsic.String.Build("Employee: {9}{0}Request ID: {1}-{2}{0}From: {3} {4} thru {5} {6}{0}Hours taken: {7}{0}Paid: {8}",v.Ambient.NewLine,"#REQID#","#SEQ#","#TIMEIN#","#DATEIN#","#TIMEOUT#","#DATEOUT#","#HOURS#","#PAID#","#NAME#",v.Local.sBody)
		gui.Request.txtBody.Text(V.Local.sBody)
		gui.Request.txtCoreBody.Text(v.Local.sBody)
		'Show
		gui.Request.optApprove.Value(True)
		F.Intrinsic.Control.UnBlockEvents
		gui.Request..Show
		Gui.Request..WaitForDismiss
		F.Intrinsic.Control.BlockEvents
	F.Intrinsic.Control.EndIf
	
	'Display rejection side
	F.Intrinsic.Control.If(V.DataView.Requests!dvReject.RowCount,>,0)
		gui.Request.txtRowIndex.Text("dvReject")
		F.Intrinsic.Control.If(V.DataView.Requests!dvReject.RowCount,=,1)
			gui.Request.lblReqID.Caption(V.DataView.Requests!dvReject(0).ReqID!FieldValString)
			gui.Request.lblSeq.Caption(V.DataView.Requests!dvReject(0).Seq!FieldValString)
			'Set employee info
			gui.Request.lblEmpID.Caption(V.DataView.Requests!dvReject(0).Employee!FieldValTrim)
			gui.Request.lblName.Caption(V.DataView.Requests!dvReject(0).Name!FieldValTrim)
			gui.Request.lblDept.Caption(V.DataView.Requests!dvReject(0).Dept!FieldValString)
			gui.Request.lblShift.Caption(V.DataView.Requests!dvReject(0).Shift!FieldValTrim)
			v.Local.sEmployee.Set(V.DataView.Requests!dvReject(0).Employee!FieldValString)
			V.Local.fHoursRem.Set(V.Dictionary.VacDict![V.Local.sEmployee])
			f.Intrinsic.String.Format(V.Local.fHoursRem,"0.00",v.Local.sRet)
			gui.Request.txtRemainingHours.Text(v.Local.sRet)
		F.Intrinsic.Control.Else
			gui.Request.lblReqID.Caption("Multiple")
			gui.Request.lblSeq.Caption("")
			'Set employee info
			gui.Request.lblEmpID.Caption("")
			gui.Request.lblName.Caption("")
			gui.Request.lblDept.Caption("")
			gui.Request.lblShift.Caption("")
			gui.Request.txtRemainingHours.Text("")
			gui.Request.txtAfterPendingApproved.Text("")
			gui.Request.txtRecepients.Text("")
		F.Intrinsic.Control.EndIf
		'Build Subject
		f.Intrinsic.String.Build("Request {0}-{1} Rejected","#REQID#","#SEQ#",v.Local.sSubject)
		gui.Request.txtSubject.Text(v.Local.sSubject)
		'Build Request Info
		f.Intrinsic.String.Build("Employee: {9}{0}Request ID: {1}-{2}{0}From: {3} {4} thru {5} {6}{0}Hours taken: {7}{0}Paid: {8}",v.Ambient.NewLine,"#REQID#","#SEQ#","#TIMEIN#","#DATEIN#","#TIMEOUT#","#DATEOUT#","#HOURS#","#PAID#","#NAME#",v.Local.sBody)
		gui.Request.txtBody.Text(V.Local.sBody)
		gui.Request.txtCoreBody.Text(v.Local.sBody)
		'Show
		gui.Request.optReject.Value(True)
		F.Intrinsic.Control.UnBlockEvents
		gui.Request..Show
		Gui.Request..WaitForDismiss
		F.Intrinsic.Control.BlockEvents
	F.Intrinsic.Control.EndIf
	
	F.Data.DataView.Close("Requests","dvApprove")
	F.Data.DataView.Close("Requests","dvReject")
	F.Intrinsic.Control.UnBlockEvents
	
	f.Intrinsic.Control.CallSub("cmdLoad_click")	
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.cmdProcess_Click1.End

Program.Sub.Comments.Start
${$5$}$2.0.0.0$}$2
${$6$}$bbaker$}$20211028094159721$}$pM7xsHplA2E9VCTenDTJ47gi1rF/t66WcPbw/+S3zct/9F4Bed1yyt3kyMND93reEfuSxYuENBg=
Program.Sub.Comments.End